-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pqcrystals_fips202_ref_sha3_256 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    h_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    h_ce0 : OUT STD_LOGIC;
    h_we0 : OUT STD_LOGIC;
    h_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    in_r_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    inlen : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of pqcrystals_fips202_ref_sha3_256 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pqcrystals_fips202_ref_sha3_256,hls_ip_2018_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7vx980tffg1930-2l,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.996000,HLS_SYN_LAT=2343,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=7529,HLS_SYN_LUT=21234,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal s_0_reg_209 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_keccak_absorb_fu_101_ap_ready : STD_LOGIC;
    signal grp_keccak_absorb_fu_101_ap_done : STD_LOGIC;
    signal s_1_reg_214 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_2_reg_219 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_3_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_4_reg_229 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_5_reg_234 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_6_reg_239 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_7_reg_244 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_8_reg_249 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_9_reg_254 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_10_reg_259 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_11_reg_264 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_12_reg_269 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_13_reg_274 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_14_reg_279 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_15_reg_284 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_16_reg_289 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_fu_198_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_297 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_302 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_keccak_squeezeblocks_fu_77_ap_start : STD_LOGIC;
    signal grp_keccak_squeezeblocks_fu_77_ap_done : STD_LOGIC;
    signal grp_keccak_squeezeblocks_fu_77_ap_idle : STD_LOGIC;
    signal grp_keccak_squeezeblocks_fu_77_ap_ready : STD_LOGIC;
    signal grp_keccak_squeezeblocks_fu_77_out_r_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_keccak_squeezeblocks_fu_77_out_r_ce0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_fu_77_out_r_we0 : STD_LOGIC;
    signal grp_keccak_squeezeblocks_fu_77_out_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_keccak_absorb_fu_101_ap_start : STD_LOGIC;
    signal grp_keccak_absorb_fu_101_ap_idle : STD_LOGIC;
    signal grp_keccak_absorb_fu_101_m_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_keccak_absorb_fu_101_m_ce0 : STD_LOGIC;
    signal grp_keccak_absorb_fu_101_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_101_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_101_ap_return_2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_101_ap_return_3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_101_ap_return_4 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_101_ap_return_5 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_101_ap_return_6 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_101_ap_return_7 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_101_ap_return_8 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_101_ap_return_9 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_101_ap_return_10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_101_ap_return_11 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_101_ap_return_12 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_101_ap_return_13 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_101_ap_return_14 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_101_ap_return_15 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_keccak_absorb_fu_101_ap_return_16 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_66 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_keccak_squeezeblocks_fu_77_ap_start_reg : STD_LOGIC := '0';
    signal grp_keccak_absorb_fu_101_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component keccak_squeezeblocks IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        s_0_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_1_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_2_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_3_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_4_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_5_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_6_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_7_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_8_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_9_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_10_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_11_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_12_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_13_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_14_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_15_read : IN STD_LOGIC_VECTOR (63 downto 0);
        s_16_read : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keccak_absorb IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_ce0 : OUT STD_LOGIC;
        m_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component pqcrystals_fips202_ref_sha3_256_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    t_U : component pqcrystals_fips202_ref_sha3_256_t
    generic map (
        DataWidth => 8,
        AddressRange => 136,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => grp_keccak_squeezeblocks_fu_77_out_r_d0,
        q0 => t_q0);

    grp_keccak_squeezeblocks_fu_77 : component keccak_squeezeblocks
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_squeezeblocks_fu_77_ap_start,
        ap_done => grp_keccak_squeezeblocks_fu_77_ap_done,
        ap_idle => grp_keccak_squeezeblocks_fu_77_ap_idle,
        ap_ready => grp_keccak_squeezeblocks_fu_77_ap_ready,
        out_r_address0 => grp_keccak_squeezeblocks_fu_77_out_r_address0,
        out_r_ce0 => grp_keccak_squeezeblocks_fu_77_out_r_ce0,
        out_r_we0 => grp_keccak_squeezeblocks_fu_77_out_r_we0,
        out_r_d0 => grp_keccak_squeezeblocks_fu_77_out_r_d0,
        s_0_read => s_0_reg_209,
        s_1_read => s_1_reg_214,
        s_2_read => s_2_reg_219,
        s_3_read => s_3_reg_224,
        s_4_read => s_4_reg_229,
        s_5_read => s_5_reg_234,
        s_6_read => s_6_reg_239,
        s_7_read => s_7_reg_244,
        s_8_read => s_8_reg_249,
        s_9_read => s_9_reg_254,
        s_10_read => s_10_reg_259,
        s_11_read => s_11_reg_264,
        s_12_read => s_12_reg_269,
        s_13_read => s_13_reg_274,
        s_14_read => s_14_reg_279,
        s_15_read => s_15_reg_284,
        s_16_read => s_16_reg_289);

    grp_keccak_absorb_fu_101 : component keccak_absorb
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_keccak_absorb_fu_101_ap_start,
        ap_done => grp_keccak_absorb_fu_101_ap_done,
        ap_idle => grp_keccak_absorb_fu_101_ap_idle,
        ap_ready => grp_keccak_absorb_fu_101_ap_ready,
        m_address0 => grp_keccak_absorb_fu_101_m_address0,
        m_ce0 => grp_keccak_absorb_fu_101_m_ce0,
        m_q0 => in_r_q0,
        ap_return_0 => grp_keccak_absorb_fu_101_ap_return_0,
        ap_return_1 => grp_keccak_absorb_fu_101_ap_return_1,
        ap_return_2 => grp_keccak_absorb_fu_101_ap_return_2,
        ap_return_3 => grp_keccak_absorb_fu_101_ap_return_3,
        ap_return_4 => grp_keccak_absorb_fu_101_ap_return_4,
        ap_return_5 => grp_keccak_absorb_fu_101_ap_return_5,
        ap_return_6 => grp_keccak_absorb_fu_101_ap_return_6,
        ap_return_7 => grp_keccak_absorb_fu_101_ap_return_7,
        ap_return_8 => grp_keccak_absorb_fu_101_ap_return_8,
        ap_return_9 => grp_keccak_absorb_fu_101_ap_return_9,
        ap_return_10 => grp_keccak_absorb_fu_101_ap_return_10,
        ap_return_11 => grp_keccak_absorb_fu_101_ap_return_11,
        ap_return_12 => grp_keccak_absorb_fu_101_ap_return_12,
        ap_return_13 => grp_keccak_absorb_fu_101_ap_return_13,
        ap_return_14 => grp_keccak_absorb_fu_101_ap_return_14,
        ap_return_15 => grp_keccak_absorb_fu_101_ap_return_15,
        ap_return_16 => grp_keccak_absorb_fu_101_ap_return_16);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_keccak_absorb_fu_101_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_absorb_fu_101_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_keccak_absorb_fu_101_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_absorb_fu_101_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_absorb_fu_101_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_keccak_squeezeblocks_fu_77_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_keccak_squeezeblocks_fu_77_ap_start_reg <= ap_const_logic_0;
            else
                if (((grp_keccak_absorb_fu_101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_keccak_squeezeblocks_fu_77_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_keccak_squeezeblocks_fu_77_ap_ready = ap_const_logic_1)) then 
                    grp_keccak_squeezeblocks_fu_77_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_reg_66 <= i_1_reg_297;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_keccak_squeezeblocks_fu_77_ap_done = ap_const_logic_1))) then 
                i_reg_66 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_1_reg_297 <= i_1_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_keccak_absorb_fu_101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                s_0_reg_209 <= grp_keccak_absorb_fu_101_ap_return_0;
                s_10_reg_259 <= grp_keccak_absorb_fu_101_ap_return_10;
                s_11_reg_264 <= grp_keccak_absorb_fu_101_ap_return_11;
                s_12_reg_269 <= grp_keccak_absorb_fu_101_ap_return_12;
                s_13_reg_274 <= grp_keccak_absorb_fu_101_ap_return_13;
                s_14_reg_279 <= grp_keccak_absorb_fu_101_ap_return_14;
                s_15_reg_284 <= grp_keccak_absorb_fu_101_ap_return_15;
                s_16_reg_289 <= grp_keccak_absorb_fu_101_ap_return_16;
                s_1_reg_214 <= grp_keccak_absorb_fu_101_ap_return_1;
                s_2_reg_219 <= grp_keccak_absorb_fu_101_ap_return_2;
                s_3_reg_224 <= grp_keccak_absorb_fu_101_ap_return_3;
                s_4_reg_229 <= grp_keccak_absorb_fu_101_ap_return_4;
                s_5_reg_234 <= grp_keccak_absorb_fu_101_ap_return_5;
                s_6_reg_239 <= grp_keccak_absorb_fu_101_ap_return_6;
                s_7_reg_244 <= grp_keccak_absorb_fu_101_ap_return_7;
                s_8_reg_249 <= grp_keccak_absorb_fu_101_ap_return_8;
                s_9_reg_254 <= grp_keccak_absorb_fu_101_ap_return_9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_192_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_reg_302(5 downto 0) <= tmp_fu_204_p1(5 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_302(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_keccak_absorb_fu_101_ap_done, ap_CS_fsm_state4, exitcond_fu_192_p2, grp_keccak_squeezeblocks_fu_77_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_keccak_absorb_fu_101_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_keccak_squeezeblocks_fu_77_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_CS_fsm_state4, exitcond_fu_192_p2)
    begin
        if (((exitcond_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, exitcond_fu_192_p2)
    begin
        if (((exitcond_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_192_p2 <= "1" when (i_reg_66 = ap_const_lv6_20) else "0";
    grp_keccak_absorb_fu_101_ap_start <= grp_keccak_absorb_fu_101_ap_start_reg;
    grp_keccak_squeezeblocks_fu_77_ap_start <= grp_keccak_squeezeblocks_fu_77_ap_start_reg;
    h_address0 <= tmp_reg_302(5 - 1 downto 0);

    h_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            h_ce0 <= ap_const_logic_1;
        else 
            h_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    h_d0 <= t_q0;

    h_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            h_we0 <= ap_const_logic_1;
        else 
            h_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_1_fu_198_p2 <= std_logic_vector(unsigned(i_reg_66) + unsigned(ap_const_lv6_1));
    in_r_address0 <= grp_keccak_absorb_fu_101_m_address0;
    in_r_ce0 <= grp_keccak_absorb_fu_101_m_ce0;

    t_address0_assign_proc : process(ap_CS_fsm_state4, tmp_fu_204_p1, grp_keccak_squeezeblocks_fu_77_out_r_address0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address0 <= tmp_fu_204_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_address0 <= grp_keccak_squeezeblocks_fu_77_out_r_address0;
        else 
            t_address0 <= "XXXXXXXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state4, grp_keccak_squeezeblocks_fu_77_out_r_ce0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_ce0 <= grp_keccak_squeezeblocks_fu_77_out_r_ce0;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_we0_assign_proc : process(grp_keccak_squeezeblocks_fu_77_out_r_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            t_we0 <= grp_keccak_squeezeblocks_fu_77_out_r_we0;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_66),64));
end behav;
