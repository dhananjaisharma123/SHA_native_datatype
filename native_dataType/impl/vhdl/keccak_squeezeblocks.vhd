-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keccak_squeezeblocks is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    s_0_read : IN STD_LOGIC_VECTOR (63 downto 0);
    s_1_read : IN STD_LOGIC_VECTOR (63 downto 0);
    s_2_read : IN STD_LOGIC_VECTOR (63 downto 0);
    s_3_read : IN STD_LOGIC_VECTOR (63 downto 0);
    s_4_read : IN STD_LOGIC_VECTOR (63 downto 0);
    s_5_read : IN STD_LOGIC_VECTOR (63 downto 0);
    s_6_read : IN STD_LOGIC_VECTOR (63 downto 0);
    s_7_read : IN STD_LOGIC_VECTOR (63 downto 0);
    s_8_read : IN STD_LOGIC_VECTOR (63 downto 0);
    s_9_read : IN STD_LOGIC_VECTOR (63 downto 0);
    s_10_read : IN STD_LOGIC_VECTOR (63 downto 0);
    s_11_read : IN STD_LOGIC_VECTOR (63 downto 0);
    s_12_read : IN STD_LOGIC_VECTOR (63 downto 0);
    s_13_read : IN STD_LOGIC_VECTOR (63 downto 0);
    s_14_read : IN STD_LOGIC_VECTOR (63 downto 0);
    s_15_read : IN STD_LOGIC_VECTOR (63 downto 0);
    s_16_read : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of keccak_squeezeblocks is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal newret_reg_543 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_277_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_277_ap_done : STD_LOGIC;
    signal newret1_reg_548 : STD_LOGIC_VECTOR (63 downto 0);
    signal newret3_reg_553 : STD_LOGIC_VECTOR (63 downto 0);
    signal newret5_reg_558 : STD_LOGIC_VECTOR (63 downto 0);
    signal newret7_reg_563 : STD_LOGIC_VECTOR (63 downto 0);
    signal newret9_reg_568 : STD_LOGIC_VECTOR (63 downto 0);
    signal newret2_reg_573 : STD_LOGIC_VECTOR (63 downto 0);
    signal newret4_reg_578 : STD_LOGIC_VECTOR (63 downto 0);
    signal newret6_reg_583 : STD_LOGIC_VECTOR (63 downto 0);
    signal newret8_reg_588 : STD_LOGIC_VECTOR (63 downto 0);
    signal newret10_reg_593 : STD_LOGIC_VECTOR (63 downto 0);
    signal newret11_reg_598 : STD_LOGIC_VECTOR (63 downto 0);
    signal newret12_reg_603 : STD_LOGIC_VECTOR (63 downto 0);
    signal newret13_reg_608 : STD_LOGIC_VECTOR (63 downto 0);
    signal newret14_reg_613 : STD_LOGIC_VECTOR (63 downto 0);
    signal newret15_reg_618 : STD_LOGIC_VECTOR (63 downto 0);
    signal newret16_reg_623 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_fu_391_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_4_reg_631 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_4_fu_397_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_636 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_411_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_277_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_277_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_277_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_277_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_277_ap_return_2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_277_ap_return_3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_277_ap_return_4 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_277_ap_return_5 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_277_ap_return_6 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_277_ap_return_7 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_277_ap_return_8 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_277_ap_return_9 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_277_ap_return_10 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_277_ap_return_11 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_277_ap_return_12 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_277_ap_return_13 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_277_ap_return_14 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_277_ap_return_15 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_277_ap_return_16 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_i_phi_fu_219_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_215 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_i_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal u_assign_reg_226 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_i_reg_266 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_KeccakF1600_StatePer_fu_277_ap_start_reg : STD_LOGIC := '0';
    signal sum_i_cast_fu_453_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_417_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_i_fu_421_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_i_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_i_fu_433_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_i_cast_fu_444_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_i_fu_448_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_condition_697 : BOOLEAN;

    component KeccakF1600_StatePer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_0_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_1_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_2_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_3_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_4_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_5_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_6_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_7_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_8_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_9_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_10_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_11_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_12_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_13_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_14_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_15_read : IN STD_LOGIC_VECTOR (63 downto 0);
        state_16_read : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_KeccakF1600_StatePer_fu_277 : component KeccakF1600_StatePer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_fu_277_ap_start,
        ap_done => grp_KeccakF1600_StatePer_fu_277_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_fu_277_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_fu_277_ap_ready,
        state_0_read => s_0_read,
        state_1_read => s_1_read,
        state_2_read => s_2_read,
        state_3_read => s_3_read,
        state_4_read => s_4_read,
        state_5_read => s_5_read,
        state_6_read => s_6_read,
        state_7_read => s_7_read,
        state_8_read => s_8_read,
        state_9_read => s_9_read,
        state_10_read => s_10_read,
        state_11_read => s_11_read,
        state_12_read => s_12_read,
        state_13_read => s_13_read,
        state_14_read => s_14_read,
        state_15_read => s_15_read,
        state_16_read => s_16_read,
        ap_return_0 => grp_KeccakF1600_StatePer_fu_277_ap_return_0,
        ap_return_1 => grp_KeccakF1600_StatePer_fu_277_ap_return_1,
        ap_return_2 => grp_KeccakF1600_StatePer_fu_277_ap_return_2,
        ap_return_3 => grp_KeccakF1600_StatePer_fu_277_ap_return_3,
        ap_return_4 => grp_KeccakF1600_StatePer_fu_277_ap_return_4,
        ap_return_5 => grp_KeccakF1600_StatePer_fu_277_ap_return_5,
        ap_return_6 => grp_KeccakF1600_StatePer_fu_277_ap_return_6,
        ap_return_7 => grp_KeccakF1600_StatePer_fu_277_ap_return_7,
        ap_return_8 => grp_KeccakF1600_StatePer_fu_277_ap_return_8,
        ap_return_9 => grp_KeccakF1600_StatePer_fu_277_ap_return_9,
        ap_return_10 => grp_KeccakF1600_StatePer_fu_277_ap_return_10,
        ap_return_11 => grp_KeccakF1600_StatePer_fu_277_ap_return_11,
        ap_return_12 => grp_KeccakF1600_StatePer_fu_277_ap_return_12,
        ap_return_13 => grp_KeccakF1600_StatePer_fu_277_ap_return_13,
        ap_return_14 => grp_KeccakF1600_StatePer_fu_277_ap_return_14,
        ap_return_15 => grp_KeccakF1600_StatePer_fu_277_ap_return_15,
        ap_return_16 => grp_KeccakF1600_StatePer_fu_277_ap_return_16);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_277_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_277_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_KeccakF1600_StatePer_fu_277_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_277_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_277_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_405_p2 = ap_const_lv1_0))) then 
                i_i_reg_266 <= i_2_fu_411_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_s_fu_385_p2 = ap_const_lv1_0))) then 
                i_i_reg_266 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_405_p2 = ap_const_lv1_1))) then 
                i_reg_215 <= i_4_reg_631;
            elsif (((grp_KeccakF1600_StatePer_fu_277_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_215 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    u_assign_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_s_fu_385_p2 = ap_const_lv1_0))) then
                if ((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_0)) then 
                    u_assign_reg_226 <= newret_reg_543;
                elsif ((ap_const_boolean_1 = ap_condition_697)) then 
                    u_assign_reg_226 <= newret16_reg_623;
                elsif ((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_F)) then 
                    u_assign_reg_226 <= newret15_reg_618;
                elsif ((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_E)) then 
                    u_assign_reg_226 <= newret14_reg_613;
                elsif ((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_D)) then 
                    u_assign_reg_226 <= newret13_reg_608;
                elsif ((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_C)) then 
                    u_assign_reg_226 <= newret12_reg_603;
                elsif ((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_B)) then 
                    u_assign_reg_226 <= newret11_reg_598;
                elsif ((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_A)) then 
                    u_assign_reg_226 <= newret10_reg_593;
                elsif ((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_9)) then 
                    u_assign_reg_226 <= newret8_reg_588;
                elsif ((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_8)) then 
                    u_assign_reg_226 <= newret6_reg_583;
                elsif ((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_7)) then 
                    u_assign_reg_226 <= newret4_reg_578;
                elsif ((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_6)) then 
                    u_assign_reg_226 <= newret2_reg_573;
                elsif ((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_5)) then 
                    u_assign_reg_226 <= newret9_reg_568;
                elsif ((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_4)) then 
                    u_assign_reg_226 <= newret7_reg_563;
                elsif ((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_3)) then 
                    u_assign_reg_226 <= newret5_reg_558;
                elsif ((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_2)) then 
                    u_assign_reg_226 <= newret3_reg_553;
                elsif ((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_1)) then 
                    u_assign_reg_226 <= newret1_reg_548;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_4_reg_631 <= i_4_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_KeccakF1600_StatePer_fu_277_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                newret10_reg_593 <= grp_KeccakF1600_StatePer_fu_277_ap_return_10;
                newret11_reg_598 <= grp_KeccakF1600_StatePer_fu_277_ap_return_11;
                newret12_reg_603 <= grp_KeccakF1600_StatePer_fu_277_ap_return_12;
                newret13_reg_608 <= grp_KeccakF1600_StatePer_fu_277_ap_return_13;
                newret14_reg_613 <= grp_KeccakF1600_StatePer_fu_277_ap_return_14;
                newret15_reg_618 <= grp_KeccakF1600_StatePer_fu_277_ap_return_15;
                newret16_reg_623 <= grp_KeccakF1600_StatePer_fu_277_ap_return_16;
                newret1_reg_548 <= grp_KeccakF1600_StatePer_fu_277_ap_return_1;
                newret2_reg_573 <= grp_KeccakF1600_StatePer_fu_277_ap_return_6;
                newret3_reg_553 <= grp_KeccakF1600_StatePer_fu_277_ap_return_2;
                newret4_reg_578 <= grp_KeccakF1600_StatePer_fu_277_ap_return_7;
                newret5_reg_558 <= grp_KeccakF1600_StatePer_fu_277_ap_return_3;
                newret6_reg_583 <= grp_KeccakF1600_StatePer_fu_277_ap_return_8;
                newret7_reg_563 <= grp_KeccakF1600_StatePer_fu_277_ap_return_4;
                newret8_reg_588 <= grp_KeccakF1600_StatePer_fu_277_ap_return_9;
                newret9_reg_568 <= grp_KeccakF1600_StatePer_fu_277_ap_return_5;
                newret_reg_543 <= grp_KeccakF1600_StatePer_fu_277_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_s_fu_385_p2 = ap_const_lv1_0))) then
                    tmp_4_reg_636(7 downto 3) <= tmp_4_fu_397_p3(7 downto 3);
            end if;
        end if;
    end process;
    tmp_4_reg_636(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_KeccakF1600_StatePer_fu_277_ap_done, ap_CS_fsm_state3, tmp_s_fu_385_p2, ap_CS_fsm_state4, exitcond_i_fu_405_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_KeccakF1600_StatePer_fu_277_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_s_fu_385_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_405_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_condition_697_assign_proc : process(ap_phi_mux_i_phi_fu_219_p4)
    begin
                ap_condition_697 <= (not((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_0)) and not((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_F)) and not((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_E)) and not((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_D)) and not((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_C)) and not((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_B)) and not((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_A)) and not((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_9)) and not((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_8)) and not((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_7)) and not((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_6)) and not((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_5)) and not((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_4)) and not((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_3)) and not((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_2)) and not((ap_phi_mux_i_phi_fu_219_p4 = ap_const_lv5_1)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3, tmp_s_fu_385_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_s_fu_385_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_phi_fu_219_p4 <= i_reg_215;

    ap_ready_assign_proc : process(ap_CS_fsm_state3, tmp_s_fu_385_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_s_fu_385_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_405_p2 <= "1" when (i_i_reg_266 = ap_const_lv4_8) else "0";
    grp_KeccakF1600_StatePer_fu_277_ap_start <= grp_KeccakF1600_StatePer_fu_277_ap_start_reg;
    i_2_fu_411_p2 <= std_logic_vector(unsigned(i_i_reg_266) + unsigned(ap_const_lv4_1));
    i_4_fu_391_p2 <= std_logic_vector(unsigned(i_reg_215) + unsigned(ap_const_lv5_1));
    out_r_address0 <= sum_i_cast_fu_453_p1(8 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= tmp_3_i_fu_433_p2(8 - 1 downto 0);

    out_r_we0_assign_proc : process(ap_CS_fsm_state4, exitcond_i_fu_405_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_405_p2 = ap_const_lv1_0))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_i_cast_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_fu_448_p2),64));
    sum_i_fu_448_p2 <= std_logic_vector(unsigned(tmp_5_i_cast_fu_444_p1) + unsigned(tmp_4_reg_636));
    tmp_1_i_fu_421_p3 <= (tmp_fu_417_p1 & ap_const_lv3_0);
    tmp_2_i_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_i_fu_421_p3),64));
    tmp_3_i_fu_433_p2 <= std_logic_vector(shift_right(unsigned(u_assign_reg_226),to_integer(unsigned('0' & tmp_2_i_fu_429_p1(31-1 downto 0)))));
    tmp_4_fu_397_p3 <= (i_reg_215 & ap_const_lv3_0);
    tmp_5_i_cast_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_266),8));
    tmp_fu_417_p1 <= i_i_reg_266(3 - 1 downto 0);
    tmp_s_fu_385_p2 <= "1" when (i_reg_215 = ap_const_lv5_11) else "0";
end behav;
