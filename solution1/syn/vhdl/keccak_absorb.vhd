-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keccak_absorb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC;
    s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    m_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_ce0 : OUT STD_LOGIC;
    m_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of keccak_absorb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_87 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010000111";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_C7 : STD_LOGIC_VECTOR (7 downto 0) := "11000111";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvarinc_fu_218_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_4_fu_246_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_2_cast5_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast5_reg_381 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_3_fu_263_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_reg_389 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_cast4_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast4_reg_405 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_5_fu_286_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_reg_413 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_292_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_418 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_306_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_6_reg_426 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_i_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_1_reg_436 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_fu_352_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal t_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_ce1 : STD_LOGIC;
    signal t_we1 : STD_LOGIC;
    signal t_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal invdar_reg_150 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_161 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_reg_172 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_3_reg_183 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_i_reg_194 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_i_reg_206 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast6_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_i_cast_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_358_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_i_cast_fu_312_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_i_fu_316_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_330_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_i_fu_334_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_11_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_i_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_i_fu_346_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component keccak_absorb_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    t_U : component keccak_absorb_t
    generic map (
        DataWidth => 8,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0,
        address1 => t_address1,
        ce1 => t_ce1,
        we1 => t_we1,
        d1 => t_d1,
        q1 => t_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_2_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_2_reg_172 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_2_reg_172 <= tmp_3_reg_389;
            end if; 
        end if;
    end process;

    i_3_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_3_reg_183 <= i_5_reg_413;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_3_reg_183 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_i_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_i_reg_194 <= i_6_reg_426;
            elsif (((tmp_4_fu_280_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                i_i_reg_194 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_161 <= ap_const_lv5_0;
            elsif (((tmp_7_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_161 <= i_4_fu_246_p2;
            end if; 
        end if;
    end process;

    invdar_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_229_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                invdar_reg_150 <= indvarinc_fu_218_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                invdar_reg_150 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_i_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                r_i_reg_206 <= r_fu_352_p2;
            elsif (((tmp_4_fu_280_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                r_i_reg_206 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                    i_2_cast5_reg_381(1 downto 0) <= i_2_cast5_fu_252_p1(1 downto 0);
                tmp_3_reg_389 <= tmp_3_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                    i_3_cast4_reg_405(4 downto 0) <= i_3_cast4_fu_276_p1(4 downto 0);
                i_5_reg_413 <= i_5_fu_286_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                i_6_reg_426 <= i_6_fu_306_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                s_addr_1_reg_436 <= i_3_cast4_reg_405(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_fu_280_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    tmp_5_reg_418(7 downto 3) <= tmp_5_fu_292_p3(7 downto 3);
            end if;
        end if;
    end process;
    i_2_cast5_reg_381(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    i_3_cast4_reg_405(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    tmp_5_reg_418(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_1_fu_257_p2, ap_CS_fsm_state7, tmp_4_fu_280_p2, ap_CS_fsm_state8, tmp_i_fu_300_p2, tmp_s_fu_229_p2, tmp_7_fu_240_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_s_fu_229_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_7_fu_240_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((tmp_1_fu_257_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((tmp_4_fu_280_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((tmp_i_fu_300_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, tmp_4_fu_280_p2)
    begin
        if ((((tmp_4_fu_280_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, tmp_4_fu_280_p2)
    begin
        if (((tmp_4_fu_280_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_2_cast5_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_172),64));
    i_3_cast4_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_183),64));
    i_4_fu_246_p2 <= std_logic_vector(unsigned(i_reg_161) + unsigned(ap_const_lv5_1));
    i_5_fu_286_p2 <= std_logic_vector(unsigned(i_3_reg_183) + unsigned(ap_const_lv5_1));
    i_6_fu_306_p2 <= std_logic_vector(unsigned(i_i_reg_194) + unsigned(ap_const_lv4_1));
    i_cast6_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_161),64));
    indvarinc_fu_218_p2 <= std_logic_vector(unsigned(invdar_reg_150) + unsigned(ap_const_lv8_1));
    m_address0 <= i_2_cast5_fu_252_p1(2 - 1 downto 0);

    m_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            m_ce0 <= ap_const_logic_1;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_352_p2 <= (tmp_3_i_fu_346_p2 or r_i_reg_206);

    s_address0_assign_proc : process(ap_CS_fsm_state3, i_3_cast4_reg_405, ap_CS_fsm_state8, s_addr_1_reg_436, ap_CS_fsm_state10, i_cast6_fu_235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            s_address0 <= s_addr_1_reg_436;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_address0 <= i_3_cast4_reg_405(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_address0 <= i_cast6_fu_235_p1(5 - 1 downto 0);
        else 
            s_address0 <= "XXXXX";
        end if; 
    end process;


    s_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            s_ce0 <= ap_const_logic_1;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state10, tmp_8_fu_358_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            s_d0 <= tmp_8_fu_358_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_d0 <= ap_const_lv64_0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_we0_assign_proc : process(ap_CS_fsm_state3, tmp_7_fu_240_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((tmp_7_fu_240_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            s_we0 <= ap_const_logic_1;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum_i_cast_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_i_fu_316_p2),64));
    sum_i_fu_316_p2 <= std_logic_vector(unsigned(tmp_9_i_cast_fu_312_p1) + unsigned(tmp_5_reg_418));

    t_address0_assign_proc : process(ap_CS_fsm_state2, i_2_cast5_reg_381, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, tmp_fu_224_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_address0 <= ap_const_lv64_3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_address0 <= i_2_cast5_reg_381(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            t_address0 <= ap_const_lv64_87(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_address0 <= tmp_fu_224_p1(8 - 1 downto 0);
        else 
            t_address0 <= "XXXXXXXX";
        end if; 
    end process;


    t_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state6, sum_i_cast_fu_321_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            t_address1 <= sum_i_cast_fu_321_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_address1 <= ap_const_lv64_87(8 - 1 downto 0);
        else 
            t_address1 <= "XXXXXXXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            t_ce1 <= ap_const_logic_1;
        else 
            t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(m_q0, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_d0 <= ap_const_lv8_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            t_d0 <= m_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_d0 <= ap_const_lv8_0;
        else 
            t_d0 <= "XXXXXXXX";
        end if; 
    end process;

    t_d1 <= (t_q0 or ap_const_lv8_80);

    t_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;


    t_we1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            t_we1 <= ap_const_logic_1;
        else 
            t_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_257_p2 <= "1" when (i_2_reg_172 = ap_const_lv2_3) else "0";
    tmp_1_i_fu_334_p3 <= (tmp_6_fu_330_p1 & ap_const_lv3_0);
    tmp_2_i_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_i_fu_334_p3),64));
    tmp_3_fu_263_p2 <= std_logic_vector(unsigned(i_2_reg_172) + unsigned(ap_const_lv2_1));
    tmp_3_i_fu_346_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_11_fu_326_p1),to_integer(unsigned('0' & tmp_2_i_fu_342_p1(31-1 downto 0)))));
    tmp_4_fu_280_p2 <= "1" when (i_3_reg_183 = ap_const_lv5_11) else "0";
    tmp_5_fu_292_p3 <= (i_3_reg_183 & ap_const_lv3_0);
    tmp_6_fu_330_p1 <= i_i_reg_194(3 - 1 downto 0);
    tmp_7_fu_240_p2 <= "1" when (i_reg_161 = ap_const_lv5_19) else "0";
    tmp_8_fu_358_p2 <= (s_q0 xor r_i_reg_206);
    tmp_9_i_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_reg_194),8));
    tmp_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_150),64));
    tmp_i_11_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_q1),64));
    tmp_i_fu_300_p2 <= "1" when (i_i_reg_194 = ap_const_lv4_8) else "0";
    tmp_s_fu_229_p2 <= "1" when (invdar_reg_150 = ap_const_lv8_C7) else "0";
end behav;
