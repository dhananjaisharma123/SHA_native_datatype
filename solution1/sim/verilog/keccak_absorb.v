// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keccak_absorb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_address0,
        s_ce0,
        s_we0,
        s_d0,
        s_q0,
        s_address1,
        s_ce1,
        s_we1,
        s_d1,
        s_q1,
        m_address0,
        m_ce0,
        m_q0,
        mlen
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] s_address0;
output   s_ce0;
output   s_we0;
output  [63:0] s_d0;
input  [63:0] s_q0;
output  [4:0] s_address1;
output   s_ce1;
output   s_we1;
output  [63:0] s_d1;
input  [63:0] s_q1;
output  [1:0] m_address0;
output   m_ce0;
input  [7:0] m_q0;
input  [63:0] mlen;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] s_address0;
reg s_ce0;
reg s_we0;
reg[63:0] s_d0;
reg s_ce1;
reg s_we1;
reg[1:0] m_address0;
reg m_ce0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] indvarinc_fu_267_p2;
wire    ap_CS_fsm_state2;
wire   [4:0] i_5_fu_295_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] i_6_fu_318_p2;
reg   [3:0] i_6_reg_454;
wire    ap_CS_fsm_state5;
wire   [63:0] sum7_fu_336_p2;
reg   [63:0] sum7_reg_459;
wire   [0:0] exitcond3_fu_312_p2;
reg   [4:0] s_addr_1_reg_464;
wire   [63:0] mlen_assign_fu_343_p2;
reg   [63:0] mlen_assign_reg_469;
wire   [63:0] p_rec_fu_349_p2;
reg   [63:0] p_rec_reg_474;
wire   [63:0] i_2_cast_fu_366_p1;
reg   [63:0] i_2_cast_reg_479;
wire    ap_CS_fsm_state8;
wire   [6:0] tmp_9_fu_376_p2;
reg   [6:0] tmp_9_reg_487;
wire   [0:0] exitcond2_fu_370_p2;
wire   [7:0] t_addr_2_reg_497;
wire    ap_CS_fsm_state10;
wire   [3:0] i_7_fu_405_p2;
reg   [3:0] i_7_reg_505;
wire    ap_CS_fsm_state12;
wire   [6:0] tmp_4_fu_411_p3;
reg   [6:0] tmp_4_reg_510;
wire   [0:0] exitcond_fu_399_p2;
reg   [4:0] s_addr_2_reg_515;
reg   [7:0] t_address0;
reg    t_ce0;
reg    t_we0;
reg   [7:0] t_d0;
wire   [7:0] t_q0;
wire    grp_KeccakF1600_StatePer_fu_246_ap_start;
wire    grp_KeccakF1600_StatePer_fu_246_ap_done;
wire    grp_KeccakF1600_StatePer_fu_246_ap_idle;
wire    grp_KeccakF1600_StatePer_fu_246_ap_ready;
wire   [4:0] grp_KeccakF1600_StatePer_fu_246_state_address0;
wire    grp_KeccakF1600_StatePer_fu_246_state_ce0;
wire    grp_KeccakF1600_StatePer_fu_246_state_we0;
wire   [63:0] grp_KeccakF1600_StatePer_fu_246_state_d0;
wire   [4:0] grp_KeccakF1600_StatePer_fu_246_state_address1;
wire    grp_KeccakF1600_StatePer_fu_246_state_ce1;
wire    grp_KeccakF1600_StatePer_fu_246_state_we1;
wire   [63:0] grp_KeccakF1600_StatePer_fu_246_state_d1;
wire    grp_load64_fu_254_ap_start;
wire    grp_load64_fu_254_ap_done;
wire    grp_load64_fu_254_ap_idle;
wire    grp_load64_fu_254_ap_ready;
wire   [7:0] grp_load64_fu_254_x_address0;
wire    grp_load64_fu_254_x_ce0;
wire   [63:0] grp_load64_fu_254_ap_return;
wire    grp_load64_1_fu_260_ap_start;
wire    grp_load64_1_fu_260_ap_done;
wire    grp_load64_1_fu_260_ap_idle;
wire    grp_load64_1_fu_260_ap_ready;
wire   [1:0] grp_load64_1_fu_260_x_address0;
wire    grp_load64_1_fu_260_x_ce0;
wire   [63:0] grp_load64_1_fu_260_ap_return;
reg   [7:0] invdar_reg_168;
wire   [0:0] tmp_s_fu_278_p2;
reg   [4:0] i_reg_179;
wire   [0:0] tmp_6_fu_289_p2;
reg   [63:0] i_4_reg_190;
wire    ap_CS_fsm_state7;
reg   [63:0] p_01_rec_reg_201;
reg   [3:0] i_1_reg_213;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_7_fu_301_p2;
reg   [6:0] i_2_reg_224;
wire    ap_CS_fsm_state9;
reg   [3:0] i_3_reg_235;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
reg    grp_KeccakF1600_StatePer_fu_246_ap_start_reg;
reg    grp_load64_fu_254_ap_start_reg;
reg    grp_load64_1_fu_260_ap_start_reg;
wire   [63:0] tmp_fu_273_p1;
wire   [63:0] i_cast6_fu_284_p1;
wire   [63:0] i_1_cast5_fu_307_p1;
wire   [63:0] sum9_cast_fu_382_p1;
wire   [63:0] i_3_cast2_fu_394_p1;
wire   [7:0] tmp_8_fu_387_p2;
wire   [63:0] tmp_3_fu_355_p2;
wire   [63:0] tmp_10_fu_420_p2;
wire   [6:0] tmp_1_fu_324_p3;
wire   [63:0] tmp_1_cast_fu_332_p1;
wire   [2:0] tmp_11_fu_362_p1;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 grp_KeccakF1600_StatePer_fu_246_ap_start_reg = 1'b0;
#0 grp_load64_fu_254_ap_start_reg = 1'b0;
#0 grp_load64_1_fu_260_ap_start_reg = 1'b0;
end

keccak_absorb_t #(
    .DataWidth( 8 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
t_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(t_address0),
    .ce0(t_ce0),
    .we0(t_we0),
    .d0(t_d0),
    .q0(t_q0)
);

KeccakF1600_StatePer grp_KeccakF1600_StatePer_fu_246(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeccakF1600_StatePer_fu_246_ap_start),
    .ap_done(grp_KeccakF1600_StatePer_fu_246_ap_done),
    .ap_idle(grp_KeccakF1600_StatePer_fu_246_ap_idle),
    .ap_ready(grp_KeccakF1600_StatePer_fu_246_ap_ready),
    .state_address0(grp_KeccakF1600_StatePer_fu_246_state_address0),
    .state_ce0(grp_KeccakF1600_StatePer_fu_246_state_ce0),
    .state_we0(grp_KeccakF1600_StatePer_fu_246_state_we0),
    .state_d0(grp_KeccakF1600_StatePer_fu_246_state_d0),
    .state_q0(s_q0),
    .state_address1(grp_KeccakF1600_StatePer_fu_246_state_address1),
    .state_ce1(grp_KeccakF1600_StatePer_fu_246_state_ce1),
    .state_we1(grp_KeccakF1600_StatePer_fu_246_state_we1),
    .state_d1(grp_KeccakF1600_StatePer_fu_246_state_d1),
    .state_q1(s_q1)
);

load64 grp_load64_fu_254(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_load64_fu_254_ap_start),
    .ap_done(grp_load64_fu_254_ap_done),
    .ap_idle(grp_load64_fu_254_ap_idle),
    .ap_ready(grp_load64_fu_254_ap_ready),
    .x_address0(grp_load64_fu_254_x_address0),
    .x_ce0(grp_load64_fu_254_x_ce0),
    .x_q0(t_q0),
    .x_offset(tmp_4_reg_510),
    .ap_return(grp_load64_fu_254_ap_return)
);

load64_1 grp_load64_1_fu_260(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_load64_1_fu_260_ap_start),
    .ap_done(grp_load64_1_fu_260_ap_done),
    .ap_idle(grp_load64_1_fu_260_ap_idle),
    .ap_ready(grp_load64_1_fu_260_ap_ready),
    .x_address0(grp_load64_1_fu_260_x_address0),
    .x_ce0(grp_load64_1_fu_260_x_ce0),
    .x_q0(m_q0),
    .x_offset(sum7_reg_459),
    .ap_return(grp_load64_1_fu_260_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_KeccakF1600_StatePer_fu_246_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond3_fu_312_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            grp_KeccakF1600_StatePer_fu_246_ap_start_reg <= 1'b1;
        end else if ((grp_KeccakF1600_StatePer_fu_246_ap_ready == 1'b1)) begin
            grp_KeccakF1600_StatePer_fu_246_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_load64_1_fu_260_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond3_fu_312_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            grp_load64_1_fu_260_ap_start_reg <= 1'b1;
        end else if ((grp_load64_1_fu_260_ap_ready == 1'b1)) begin
            grp_load64_1_fu_260_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_load64_fu_254_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond_fu_399_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
            grp_load64_fu_254_ap_start_reg <= 1'b1;
        end else if ((grp_load64_fu_254_ap_ready == 1'b1)) begin
            grp_load64_fu_254_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_213 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (grp_load64_1_fu_260_ap_done == 1'b1))) begin
        i_1_reg_213 <= i_6_reg_454;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_2_reg_224 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        i_2_reg_224 <= tmp_9_reg_487;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (grp_load64_fu_254_ap_done == 1'b1))) begin
        i_3_reg_235 <= i_7_reg_505;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        i_3_reg_235 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_4_reg_190 <= mlen;
    end else if (((1'b1 == ap_CS_fsm_state7) & (grp_KeccakF1600_StatePer_fu_246_ap_done == 1'b1))) begin
        i_4_reg_190 <= mlen_assign_reg_469;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_179 <= 5'd0;
    end else if (((tmp_6_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_179 <= i_5_fu_295_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        invdar_reg_168 <= indvarinc_fu_267_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        invdar_reg_168 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_01_rec_reg_201 <= 64'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (grp_KeccakF1600_StatePer_fu_246_ap_done == 1'b1))) begin
        p_01_rec_reg_201 <= p_rec_reg_474;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_2_cast_reg_479[6 : 0] <= i_2_cast_fu_366_p1[6 : 0];
        tmp_9_reg_487 <= tmp_9_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_6_reg_454 <= i_6_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_7_reg_505 <= i_7_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_312_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        mlen_assign_reg_469 <= mlen_assign_fu_343_p2;
        p_rec_reg_474 <= p_rec_fu_349_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_312_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        s_addr_1_reg_464[3 : 0] <= i_1_cast5_fu_307_p1[3 : 0];
        sum7_reg_459 <= sum7_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_399_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        s_addr_2_reg_515[3 : 0] <= i_3_cast2_fu_394_p1[3 : 0];
        tmp_4_reg_510[6 : 3] <= tmp_4_fu_411_p3[6 : 3];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((exitcond_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        m_address0 = sum9_cast_fu_382_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        m_address0 = grp_load64_1_fu_260_x_address0;
    end else begin
        m_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        m_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        m_ce0 = grp_load64_1_fu_260_x_ce0;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        s_address0 = s_addr_2_reg_515;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        s_address0 = i_3_cast2_fu_394_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        s_address0 = s_addr_1_reg_464;
    end else if (((exitcond3_fu_312_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        s_address0 = i_1_cast5_fu_307_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_address0 = i_cast6_fu_284_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        s_address0 = grp_KeccakF1600_StatePer_fu_246_state_address0;
    end else begin
        s_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state12) | ((exitcond3_fu_312_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((1'b1 == ap_CS_fsm_state13) & (grp_load64_fu_254_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state6) & (grp_load64_1_fu_260_ap_done == 1'b1)))) begin
        s_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        s_ce0 = grp_KeccakF1600_StatePer_fu_246_state_ce0;
    end else begin
        s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        s_ce1 = grp_KeccakF1600_StatePer_fu_246_state_ce1;
    end else begin
        s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        s_d0 = tmp_10_fu_420_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        s_d0 = tmp_3_fu_355_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_d0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        s_d0 = grp_KeccakF1600_StatePer_fu_246_state_d0;
    end else begin
        s_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_6_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_CS_fsm_state13) & (grp_load64_fu_254_ap_done == 1'b1)) | ((1'b1 == ap_CS_fsm_state6) & (grp_load64_1_fu_260_ap_done == 1'b1)))) begin
        s_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        s_we0 = grp_KeccakF1600_StatePer_fu_246_state_we0;
    end else begin
        s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        s_we1 = grp_KeccakF1600_StatePer_fu_246_state_we1;
    end else begin
        s_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        t_address0 = t_addr_2_reg_497;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        t_address0 = 64'd71;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        t_address0 = i_2_cast_reg_479;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        t_address0 = i_4_reg_190;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_address0 = tmp_fu_273_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        t_address0 = grp_load64_fu_254_x_address0;
    end else begin
        t_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10))) begin
        t_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        t_ce0 = grp_load64_fu_254_x_ce0;
    end else begin
        t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        t_d0 = tmp_8_fu_387_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        t_d0 = m_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        t_d0 = 8'd6;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_d0 = 8'd0;
    end else begin
        t_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | ((exitcond2_fu_370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8)))) begin
        t_we0 = 1'b1;
    end else begin
        t_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_s_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_6_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_7_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond3_fu_312_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_load64_1_fu_260_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_KeccakF1600_StatePer_fu_246_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((exitcond2_fu_370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((exitcond_fu_399_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (grp_load64_fu_254_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond2_fu_370_p2 = ((i_2_cast_fu_366_p1 == i_4_reg_190) ? 1'b1 : 1'b0);

assign exitcond3_fu_312_p2 = ((i_1_reg_213 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_fu_399_p2 = ((i_3_reg_235 == 4'd9) ? 1'b1 : 1'b0);

assign grp_KeccakF1600_StatePer_fu_246_ap_start = grp_KeccakF1600_StatePer_fu_246_ap_start_reg;

assign grp_load64_1_fu_260_ap_start = grp_load64_1_fu_260_ap_start_reg;

assign grp_load64_fu_254_ap_start = grp_load64_fu_254_ap_start_reg;

assign i_1_cast5_fu_307_p1 = i_1_reg_213;

assign i_2_cast_fu_366_p1 = i_2_reg_224;

assign i_3_cast2_fu_394_p1 = i_3_reg_235;

assign i_5_fu_295_p2 = (i_reg_179 + 5'd1);

assign i_6_fu_318_p2 = (i_1_reg_213 + 4'd1);

assign i_7_fu_405_p2 = (i_3_reg_235 + 4'd1);

assign i_cast6_fu_284_p1 = i_reg_179;

assign indvarinc_fu_267_p2 = (invdar_reg_168 + 8'd1);

assign mlen_assign_fu_343_p2 = ($signed(i_4_reg_190) + $signed(64'd18446744073709551544));

assign p_rec_fu_349_p2 = (p_01_rec_reg_201 + 64'd72);

assign s_address1 = grp_KeccakF1600_StatePer_fu_246_state_address1;

assign s_d1 = grp_KeccakF1600_StatePer_fu_246_state_d1;

assign sum7_fu_336_p2 = (p_01_rec_reg_201 + tmp_1_cast_fu_332_p1);

assign sum9_cast_fu_382_p1 = tmp_11_fu_362_p1;

assign t_addr_2_reg_497 = 64'd71;

assign tmp_10_fu_420_p2 = (s_q0 ^ grp_load64_fu_254_ap_return);

assign tmp_11_fu_362_p1 = i_2_reg_224[2:0];

assign tmp_1_cast_fu_332_p1 = tmp_1_fu_324_p3;

assign tmp_1_fu_324_p3 = {{i_1_reg_213}, {3'd0}};

assign tmp_3_fu_355_p2 = (s_q0 ^ grp_load64_1_fu_260_ap_return);

assign tmp_4_fu_411_p3 = {{i_3_reg_235}, {3'd0}};

assign tmp_6_fu_289_p2 = ((i_reg_179 == 5'd25) ? 1'b1 : 1'b0);

assign tmp_7_fu_301_p2 = ((i_4_reg_190 < 64'd72) ? 1'b1 : 1'b0);

assign tmp_8_fu_387_p2 = (t_q0 | 8'd128);

assign tmp_9_fu_376_p2 = (7'd1 + i_2_reg_224);

assign tmp_fu_273_p1 = invdar_reg_168;

assign tmp_s_fu_278_p2 = ((invdar_reg_168 == 8'd199) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    s_addr_1_reg_464[4] <= 1'b0;
    i_2_cast_reg_479[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_4_reg_510[2:0] <= 3'b000;
    s_addr_2_reg_515[4] <= 1'b0;
end

endmodule //keccak_absorb
