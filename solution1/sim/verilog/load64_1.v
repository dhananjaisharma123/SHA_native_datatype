// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module load64_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_address0,
        x_ce0,
        x_q0,
        x_offset,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] x_address0;
output   x_ce0;
input  [7:0] x_q0;
input  [63:0] x_offset;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg x_ce0;
reg[63:0] ap_return;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] tmp_4_fu_74_p1;
reg   [2:0] tmp_4_reg_131;
wire   [3:0] i_3_fu_84_p2;
reg   [3:0] i_3_reg_139;
wire    ap_CS_fsm_state2;
wire   [2:0] tmp_5_fu_90_p1;
reg   [2:0] tmp_5_reg_144;
wire   [0:0] tmp_fu_78_p2;
wire   [63:0] r_1_fu_125_p2;
wire    ap_CS_fsm_state3;
reg   [3:0] i_reg_51;
reg   [63:0] r_reg_62;
wire   [63:0] sum_cast_fu_99_p1;
wire   [2:0] sum_fu_94_p2;
wire   [5:0] tmp_1_fu_108_p3;
wire   [63:0] tmp_s_fu_104_p1;
wire   [63:0] tmp_2_fu_115_p1;
wire   [63:0] tmp_3_fu_119_p2;
reg   [63:0] ap_return_preg;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_return_preg = 64'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 64'd0;
    end else begin
        if (((tmp_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_return_preg <= r_reg_62;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_51 <= i_3_reg_139;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_51 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        r_reg_62 <= r_1_fu_125_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_reg_62 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_139 <= i_3_fu_84_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_4_reg_131 <= tmp_4_fu_74_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_78_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_5_reg_144 <= tmp_5_fu_90_p1;
    end
end

always @ (*) begin
    if ((((tmp_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_return = r_reg_62;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign i_3_fu_84_p2 = (i_reg_51 + 4'd1);

assign r_1_fu_125_p2 = (tmp_3_fu_119_p2 | r_reg_62);

assign sum_cast_fu_99_p1 = sum_fu_94_p2;

assign sum_fu_94_p2 = (tmp_4_reg_131 + tmp_5_fu_90_p1);

assign tmp_1_fu_108_p3 = {{tmp_5_reg_144}, {3'd0}};

assign tmp_2_fu_115_p1 = tmp_1_fu_108_p3;

assign tmp_3_fu_119_p2 = tmp_s_fu_104_p1 << tmp_2_fu_115_p1;

assign tmp_4_fu_74_p1 = x_offset[2:0];

assign tmp_5_fu_90_p1 = i_reg_51[2:0];

assign tmp_fu_78_p2 = ((i_reg_51 == 4'd8) ? 1'b1 : 1'b0);

assign tmp_s_fu_104_p1 = x_q0;

assign x_address0 = sum_cast_fu_99_p1;

endmodule //load64_1
