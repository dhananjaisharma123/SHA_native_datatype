-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keccak_absorb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC;
    s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce1 : OUT STD_LOGIC;
    s_we1 : OUT STD_LOGIC;
    s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    m_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    m_ce0 : OUT STD_LOGIC;
    m_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    m_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    m_ce1 : OUT STD_LOGIC;
    m_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    mlen : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of keccak_absorb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv8_88 : STD_LOGIC_VECTOR (7 downto 0) := "10001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_87 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010000111";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_C7 : STD_LOGIC_VECTOR (7 downto 0) := "11000111";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_lv64_FFFFFFFFFFFFFF78 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111101111000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvarinc_fu_701_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_8_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1155 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal i_6_fu_738_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_reg_1162 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_3_fu_744_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_1167 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_25_reg_1187 : STD_LOGIC_VECTOR (4 downto 0);
    signal m_load_1_reg_1193 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal m_load_2_reg_1198 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_load_3_reg_1213 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal m_load_4_reg_1218 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_load_5_reg_1233 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal m_load_6_reg_1238 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0_rec_lcssa_cast_ca_fu_855_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_0_rec_lcssa_cast_ca_reg_1253 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_693_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_693_ap_done : STD_LOGIC;
    signal ap_block_state20_on_subcall_done : BOOLEAN;
    signal i_2_cast_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_1258 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal tmp_4_fu_873_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_1266 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_addr_2_reg_1276 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal tmp_6_fu_901_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1281 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_7_fu_907_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_1285 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_addr_26_reg_1305 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_load_1_reg_1311 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal t_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_load_2_reg_1316 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_load_3_reg_1331 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal t_load_4_reg_1336 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_load_5_reg_1351 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal t_load_6_reg_1356 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_1_fu_1029_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_1_reg_1374 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_15_1_fu_1023_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_27_reg_1394 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_7_1_fu_1053_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_7_1_reg_1400 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_load_9_reg_1405 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal t_load_10_reg_1410 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_load_11_reg_1425 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal t_load_12_reg_1430 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_load_13_reg_1445 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal t_load_14_reg_1450 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_693_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_693_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_693_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_693_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_693_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_693_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_693_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_693_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_693_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_693_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal invdar_reg_625 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_636 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_phi_mux_p_0_rec_lcssa_phi_fu_651_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_0_rec_lcssa_reg_647 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_5_lcssa_reg_659 : STD_LOGIC_VECTOR (63 downto 0);
    signal mlen_assign_fu_849_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_reg_670 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_3_reg_681 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_693_ap_start_reg : STD_LOGIC := '0';
    signal tmp_fu_707_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_3_cast_fu_752_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_i_cast_fu_763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast7_fu_727_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_2_i_cast_fu_773_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_3_i_cast_fu_783_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_4_i_cast_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_5_i_cast_fu_803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_6_i_cast_fu_813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_7_i_cast_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum9_cast_fu_884_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_cast_fu_915_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_i1_cast_fu_926_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast4_fu_896_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_2_i1_cast_fu_936_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_3_i1_cast_fu_946_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_4_i1_cast_fu_956_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_5_i1_cast_fu_966_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_6_i1_cast_fu_976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_7_i1_cast_fu_986_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_1_cast_fu_1037_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_i2_cast_fu_1048_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_7_cast2_fu_1018_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_2_i2_cast_fu_1064_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_3_i2_cast_fu_1074_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_4_i2_cast_fu_1084_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_5_i2_cast_fu_1094_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_6_i2_cast_fu_1104_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_7_i2_cast_fu_1114_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_889_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_842_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_1005_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_1_fu_1133_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ff_fu_718_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_1_i_fu_757_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_2_i_fu_768_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_i_fu_778_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_4_i_fu_788_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_5_i_fu_798_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_6_i_fu_808_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_7_i_fu_818_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_1_7_i_fu_828_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast5_cast_fu_859_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum9_fu_879_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sum_1_i1_fu_920_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_2_i1_fu_931_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_i1_fu_941_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_4_i1_fu_951_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_5_i1_fu_961_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_6_i1_fu_971_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_7_i1_fu_981_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_1_7_i1_fu_991_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_7_s_fu_1012_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sum_1_i2_fu_1042_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_2_i2_fu_1059_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_i2_fu_1069_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_4_i2_fu_1079_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_5_i2_fu_1089_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_6_i2_fu_1099_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_7_i2_fu_1109_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_1_7_i2_fu_1119_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);

    component KeccakF1600_StatePer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keccak_absorb_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    t_U : component keccak_absorb_t
    generic map (
        DataWidth => 8,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0,
        address1 => t_address1,
        ce1 => t_ce1,
        q1 => t_q1);

    grp_KeccakF1600_StatePer_fu_693 : component KeccakF1600_StatePer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_fu_693_ap_start,
        ap_done => grp_KeccakF1600_StatePer_fu_693_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_fu_693_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_fu_693_ap_ready,
        state_address0 => grp_KeccakF1600_StatePer_fu_693_state_address0,
        state_ce0 => grp_KeccakF1600_StatePer_fu_693_state_ce0,
        state_we0 => grp_KeccakF1600_StatePer_fu_693_state_we0,
        state_d0 => grp_KeccakF1600_StatePer_fu_693_state_d0,
        state_q0 => s_q0,
        state_address1 => grp_KeccakF1600_StatePer_fu_693_state_address1,
        state_ce1 => grp_KeccakF1600_StatePer_fu_693_state_ce1,
        state_we1 => grp_KeccakF1600_StatePer_fu_693_state_we1,
        state_d1 => grp_KeccakF1600_StatePer_fu_693_state_d1,
        state_q1 => s_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_693_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_693_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_9_fu_732_p2 = ap_const_lv1_1))) then 
                    grp_KeccakF1600_StatePer_fu_693_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_693_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_693_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_636_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_1_reg_636 <= i_6_reg_1162;
            elsif (((tmp_8_fu_721_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i_1_reg_636 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_2_reg_670_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_boolean_0 = ap_block_state20_on_subcall_done))) then 
                i_2_reg_670 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                i_2_reg_670 <= tmp_4_reg_1266;
            end if; 
        end if;
    end process;

    i_3_reg_681_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                i_3_reg_681 <= i_7_1_reg_1400;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                i_3_reg_681 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_5_lcssa_reg_659_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_reg_1155 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_boolean_0 = ap_block_state20_on_subcall_done))) then 
                i_5_lcssa_reg_659 <= mlen_assign_fu_849_p2;
            elsif (((tmp_8_fu_721_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i_5_lcssa_reg_659 <= mlen;
            end if; 
        end if;
    end process;

    invdar_reg_625_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_712_p2 = ap_const_lv1_0))) then 
                invdar_reg_625 <= indvarinc_fu_701_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                invdar_reg_625 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_0_rec_lcssa_reg_647_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_reg_1155 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_boolean_0 = ap_block_state20_on_subcall_done))) then 
                p_0_rec_lcssa_reg_647(3) <= '1';
                p_0_rec_lcssa_reg_647(7) <= '1';
            elsif (((tmp_8_fu_721_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                p_0_rec_lcssa_reg_647(3) <= '0';
                p_0_rec_lcssa_reg_647(7) <= '0';
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                    i_2_cast_reg_1258(7 downto 0) <= i_2_cast_fu_863_p1(7 downto 0);
                tmp_4_reg_1266 <= tmp_4_fu_873_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_6_reg_1162 <= i_6_fu_738_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (tmp_15_1_fu_1023_p2 = ap_const_lv1_0) and (tmp_6_reg_1281 = ap_const_lv1_0))) then
                i_7_1_reg_1400 <= i_7_1_fu_1053_p2;
                    s_addr_27_reg_1394(4 downto 1) <= i_7_cast2_fu_1018_p1(5 - 1 downto 0)(4 downto 1);
                    tmp_16_1_reg_1374(7 downto 4) <= tmp_16_1_fu_1029_p3(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                m_load_1_reg_1193 <= m_q0;
                m_load_2_reg_1198 <= m_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                m_load_3_reg_1213 <= m_q0;
                m_load_4_reg_1218 <= m_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                m_load_5_reg_1233 <= m_q0;
                m_load_6_reg_1238 <= m_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_boolean_0 = ap_block_state20_on_subcall_done))) then
                    p_0_rec_lcssa_cast_ca_reg_1253(3) <= p_0_rec_lcssa_cast_ca_fu_855_p1(3);    p_0_rec_lcssa_cast_ca_reg_1253(7) <= p_0_rec_lcssa_cast_ca_fu_855_p1(7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_9_fu_732_p2 = ap_const_lv1_0))) then
                s_addr_25_reg_1187 <= i_1_cast7_fu_727_p1(5 - 1 downto 0);
                    tmp_3_reg_1167(7 downto 3) <= tmp_3_fu_744_p3(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_6_fu_901_p2 = ap_const_lv1_0))) then
                s_addr_26_reg_1305 <= i_3_cast4_fu_896_p1(5 - 1 downto 0);
                    tmp_7_reg_1285(7 downto 3) <= tmp_7_fu_907_p3(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                t_load_10_reg_1410 <= t_q0;
                t_load_9_reg_1405 <= t_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                t_load_11_reg_1425 <= t_q1;
                t_load_12_reg_1430 <= t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                t_load_13_reg_1445 <= t_q1;
                t_load_14_reg_1450 <= t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                t_load_1_reg_1311 <= t_q0;
                t_load_2_reg_1316 <= t_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                t_load_3_reg_1331 <= t_q1;
                t_load_4_reg_1336 <= t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                t_load_5_reg_1351 <= t_q1;
                t_load_6_reg_1356 <= t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_6_reg_1281 <= tmp_6_fu_901_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_8_reg_1155 <= tmp_8_fu_721_p2;
            end if;
        end if;
    end process;
    tmp_3_reg_1167(2 downto 0) <= "000";
    p_0_rec_lcssa_cast_ca_reg_1253(2 downto 0) <= "000";
    p_0_rec_lcssa_cast_ca_reg_1253(6 downto 4) <= "000";
    p_0_rec_lcssa_cast_ca_reg_1253(8) <= '0';
    i_2_cast_reg_1258(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    tmp_7_reg_1285(2 downto 0) <= "000";
    tmp_16_1_reg_1374(3 downto 0) <= "1000";
    s_addr_27_reg_1394(0) <= '1';
    p_0_rec_lcssa_reg_647(2 downto 0) <= "000";
    p_0_rec_lcssa_reg_647(6 downto 4) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_8_fu_721_p2, ap_CS_fsm_state14, ap_CS_fsm_state15, tmp_9_fu_732_p2, ap_CS_fsm_state20, ap_block_state20_on_subcall_done, ap_CS_fsm_state21, exitcond_fu_867_p2, tmp_6_fu_901_p2, tmp_6_reg_1281, ap_CS_fsm_state25, ap_CS_fsm_state29, tmp_15_1_fu_1023_p2, tmp_s_fu_712_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_712_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((tmp_8_fu_721_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_9_fu_732_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_boolean_0 = ap_block_state20_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond_fu_867_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state25) and (tmp_6_fu_901_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and ((tmp_15_1_fu_1023_p2 = ap_const_lv1_1) or (tmp_6_reg_1281 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state20_on_subcall_done_assign_proc : process(tmp_8_reg_1155, grp_KeccakF1600_StatePer_fu_693_ap_done)
    begin
                ap_block_state20_on_subcall_done <= ((tmp_8_reg_1155 = ap_const_lv1_1) and (grp_KeccakF1600_StatePer_fu_693_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_6_reg_1281, ap_CS_fsm_state29, tmp_15_1_fu_1023_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state29) and ((tmp_15_1_fu_1023_p2 = ap_const_lv1_1) or (tmp_6_reg_1281 = ap_const_lv1_1))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0_rec_lcssa_phi_fu_651_p4_assign_proc : process(tmp_8_reg_1155, ap_CS_fsm_state20, p_0_rec_lcssa_reg_647)
    begin
        if (((tmp_8_reg_1155 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            ap_phi_mux_p_0_rec_lcssa_phi_fu_651_p4 <= ap_const_lv8_88;
        else 
            ap_phi_mux_p_0_rec_lcssa_phi_fu_651_p4 <= p_0_rec_lcssa_reg_647;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_6_reg_1281, ap_CS_fsm_state29, tmp_15_1_fu_1023_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) and ((tmp_15_1_fu_1023_p2 = ap_const_lv1_1) or (tmp_6_reg_1281 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_867_p2 <= "1" when (i_2_cast_fu_863_p1 = i_5_lcssa_reg_659) else "0";
    ff_fu_718_p1 <= mlen(8 - 1 downto 0);
    grp_KeccakF1600_StatePer_fu_693_ap_start <= grp_KeccakF1600_StatePer_fu_693_ap_start_reg;
    i_1_cast7_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_636),64));
    i_2_cast5_cast_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_670),9));
    i_2_cast_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_670),64));
    i_3_cast4_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_681),64));
    i_6_fu_738_p2 <= std_logic_vector(unsigned(i_1_reg_636) + unsigned(ap_const_lv5_1));
    i_7_1_fu_1053_p2 <= std_logic_vector(unsigned(i_3_reg_681) + unsigned(ap_const_lv5_2));
    i_7_cast2_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_s_fu_1012_p2),64));
    i_7_s_fu_1012_p2 <= (i_3_reg_681 or ap_const_lv5_1);
    indvarinc_fu_701_p2 <= std_logic_vector(unsigned(invdar_reg_625) + unsigned(ap_const_lv8_1));

    m_address0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state21, tmp_3_cast_fu_752_p1, sum_2_i_cast_fu_773_p1, sum_4_i_cast_fu_793_p1, sum_6_i_cast_fu_813_p1, sum9_cast_fu_884_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            m_address0 <= sum9_cast_fu_884_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            m_address0 <= sum_6_i_cast_fu_813_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            m_address0 <= sum_4_i_cast_fu_793_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            m_address0 <= sum_2_i_cast_fu_773_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            m_address0 <= tmp_3_cast_fu_752_p1(12 - 1 downto 0);
        else 
            m_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    m_address1_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, sum_1_i_cast_fu_763_p1, sum_3_i_cast_fu_783_p1, sum_5_i_cast_fu_803_p1, sum_7_i_cast_fu_823_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            m_address1 <= sum_7_i_cast_fu_823_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            m_address1 <= sum_5_i_cast_fu_803_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            m_address1 <= sum_3_i_cast_fu_783_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            m_address1 <= sum_1_i_cast_fu_763_p1(12 - 1 downto 0);
        else 
            m_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    m_ce0_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            m_ce0 <= ap_const_logic_1;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_ce1_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            m_ce1 <= ap_const_logic_1;
        else 
            m_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mlen_assign_fu_849_p2 <= std_logic_vector(unsigned(mlen) + unsigned(ap_const_lv64_FFFFFFFFFFFFFF78));
    p_0_rec_lcssa_cast_ca_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_p_0_rec_lcssa_phi_fu_651_p4),9));
    r_1_7_i1_fu_991_p9 <= (((((((t_q0 & t_q1) & t_load_6_reg_1356) & t_load_5_reg_1351) & t_load_4_reg_1336) & t_load_3_reg_1331) & t_load_2_reg_1316) & t_load_1_reg_1311);
    r_1_7_i2_fu_1119_p9 <= (((((((t_q0 & t_q1) & t_load_14_reg_1450) & t_load_13_reg_1445) & t_load_12_reg_1430) & t_load_11_reg_1425) & t_load_10_reg_1410) & t_load_9_reg_1405);
    r_1_7_i_fu_828_p9 <= (((((((m_q1 & m_q0) & m_load_6_reg_1238) & m_load_5_reg_1233) & m_load_4_reg_1218) & m_load_3_reg_1213) & m_load_2_reg_1198) & m_load_1_reg_1193);

    s_address0_assign_proc : process(ap_CS_fsm_state2, tmp_8_reg_1155, ap_CS_fsm_state14, s_addr_25_reg_1187, ap_CS_fsm_state20, s_addr_26_reg_1305, ap_CS_fsm_state29, s_addr_27_reg_1394, grp_KeccakF1600_StatePer_fu_693_state_address0, ap_CS_fsm_state19, ap_CS_fsm_state33, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            s_address0 <= s_addr_27_reg_1394;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            s_address0 <= s_addr_26_reg_1305;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            s_address0 <= s_addr_25_reg_1187;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            s_address0 <= ap_const_lv64_18(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            s_address0 <= ap_const_lv64_16(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            s_address0 <= ap_const_lv64_14(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            s_address0 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            s_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            s_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            s_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            s_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        elsif (((tmp_8_reg_1155 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            s_address0 <= grp_KeccakF1600_StatePer_fu_693_state_address0;
        else 
            s_address0 <= "XXXXX";
        end if; 
    end process;


    s_address1_assign_proc : process(tmp_8_reg_1155, ap_CS_fsm_state14, s_addr_25_reg_1187, ap_CS_fsm_state18, ap_CS_fsm_state20, s_addr_26_reg_1305, ap_CS_fsm_state28, s_addr_27_reg_1394, ap_CS_fsm_state32, grp_KeccakF1600_StatePer_fu_693_state_address1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            s_address1 <= s_addr_27_reg_1394;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            s_address1 <= s_addr_26_reg_1305;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            s_address1 <= s_addr_25_reg_1187;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            s_address1 <= ap_const_lv64_17(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            s_address1 <= ap_const_lv64_15(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            s_address1 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            s_address1 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            s_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            s_address1 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            s_address1 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            s_address1 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            s_address1 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            s_address1 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            s_address1 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif (((tmp_8_reg_1155 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            s_address1 <= grp_KeccakF1600_StatePer_fu_693_state_address1;
        else 
            s_address1 <= "XXXXX";
        end if; 
    end process;


    s_ce0_assign_proc : process(ap_CS_fsm_state2, tmp_8_reg_1155, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state29, grp_KeccakF1600_StatePer_fu_693_state_ce0, ap_CS_fsm_state19, ap_CS_fsm_state33, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            s_ce0 <= ap_const_logic_1;
        elsif (((tmp_8_reg_1155 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            s_ce0 <= grp_KeccakF1600_StatePer_fu_693_state_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(tmp_8_reg_1155, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state28, ap_CS_fsm_state32, grp_KeccakF1600_StatePer_fu_693_state_ce1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            s_ce1 <= ap_const_logic_1;
        elsif (((tmp_8_reg_1155 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            s_ce1 <= grp_KeccakF1600_StatePer_fu_693_state_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state2, tmp_8_reg_1155, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state29, grp_KeccakF1600_StatePer_fu_693_state_d0, ap_CS_fsm_state19, ap_CS_fsm_state33, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, tmp_5_fu_842_p2, tmp_10_fu_1005_p2, tmp_18_1_fu_1133_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            s_d0 <= tmp_18_1_fu_1133_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            s_d0 <= tmp_10_fu_1005_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            s_d0 <= tmp_5_fu_842_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            s_d0 <= ap_const_lv64_0;
        elsif (((tmp_8_reg_1155 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            s_d0 <= grp_KeccakF1600_StatePer_fu_693_state_d0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_d1_assign_proc : process(tmp_8_reg_1155, ap_CS_fsm_state14, ap_CS_fsm_state20, grp_KeccakF1600_StatePer_fu_693_state_d1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            s_d1 <= ap_const_lv64_0;
        elsif (((tmp_8_reg_1155 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            s_d1 <= grp_KeccakF1600_StatePer_fu_693_state_d1;
        else 
            s_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    s_we0_assign_proc : process(ap_CS_fsm_state2, tmp_8_reg_1155, ap_CS_fsm_state14, ap_CS_fsm_state20, tmp_6_reg_1281, ap_CS_fsm_state29, grp_KeccakF1600_StatePer_fu_693_state_we0, tmp_s_fu_712_p2, ap_CS_fsm_state19, ap_CS_fsm_state33, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_712_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (tmp_6_reg_1281 = ap_const_lv1_0)))) then 
            s_we0 <= ap_const_logic_1;
        elsif (((tmp_8_reg_1155 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            s_we0 <= grp_KeccakF1600_StatePer_fu_693_state_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(tmp_8_reg_1155, ap_CS_fsm_state14, ap_CS_fsm_state20, grp_KeccakF1600_StatePer_fu_693_state_we1, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            s_we1 <= ap_const_logic_1;
        elsif (((tmp_8_reg_1155 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            s_we1 <= grp_KeccakF1600_StatePer_fu_693_state_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sum9_cast_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum9_fu_879_p2),64));
    sum9_fu_879_p2 <= std_logic_vector(unsigned(i_2_cast5_cast_fu_859_p1) + unsigned(p_0_rec_lcssa_cast_ca_reg_1253));
    sum_1_i1_cast_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_1_i1_fu_920_p2),64));
    sum_1_i1_fu_920_p2 <= (tmp_7_fu_907_p3 or ap_const_lv8_1);
    sum_1_i2_cast_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_1_i2_fu_1042_p2),64));
    sum_1_i2_fu_1042_p2 <= (tmp_16_1_fu_1029_p3 or ap_const_lv8_1);
    sum_1_i_cast_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_1_i_fu_757_p2),64));
    sum_1_i_fu_757_p2 <= (tmp_3_fu_744_p3 or ap_const_lv8_1);
    sum_2_i1_cast_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_2_i1_fu_931_p2),64));
    sum_2_i1_fu_931_p2 <= (tmp_7_reg_1285 or ap_const_lv8_2);
    sum_2_i2_cast_fu_1064_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_2_i2_fu_1059_p2),64));
    sum_2_i2_fu_1059_p2 <= (tmp_16_1_reg_1374 or ap_const_lv8_2);
    sum_2_i_cast_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_2_i_fu_768_p2),64));
    sum_2_i_fu_768_p2 <= (tmp_3_reg_1167 or ap_const_lv8_2);
    sum_3_i1_cast_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_3_i1_fu_941_p2),64));
    sum_3_i1_fu_941_p2 <= (tmp_7_reg_1285 or ap_const_lv8_3);
    sum_3_i2_cast_fu_1074_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_3_i2_fu_1069_p2),64));
    sum_3_i2_fu_1069_p2 <= (tmp_16_1_reg_1374 or ap_const_lv8_3);
    sum_3_i_cast_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_3_i_fu_778_p2),64));
    sum_3_i_fu_778_p2 <= (tmp_3_reg_1167 or ap_const_lv8_3);
    sum_4_i1_cast_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_4_i1_fu_951_p2),64));
    sum_4_i1_fu_951_p2 <= (tmp_7_reg_1285 or ap_const_lv8_4);
    sum_4_i2_cast_fu_1084_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_4_i2_fu_1079_p2),64));
    sum_4_i2_fu_1079_p2 <= (tmp_16_1_reg_1374 or ap_const_lv8_4);
    sum_4_i_cast_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_4_i_fu_788_p2),64));
    sum_4_i_fu_788_p2 <= (tmp_3_reg_1167 or ap_const_lv8_4);
    sum_5_i1_cast_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_5_i1_fu_961_p2),64));
    sum_5_i1_fu_961_p2 <= (tmp_7_reg_1285 or ap_const_lv8_5);
    sum_5_i2_cast_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_5_i2_fu_1089_p2),64));
    sum_5_i2_fu_1089_p2 <= (tmp_16_1_reg_1374 or ap_const_lv8_5);
    sum_5_i_cast_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_5_i_fu_798_p2),64));
    sum_5_i_fu_798_p2 <= (tmp_3_reg_1167 or ap_const_lv8_5);
    sum_6_i1_cast_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_6_i1_fu_971_p2),64));
    sum_6_i1_fu_971_p2 <= (tmp_7_reg_1285 or ap_const_lv8_6);
    sum_6_i2_cast_fu_1104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_6_i2_fu_1099_p2),64));
    sum_6_i2_fu_1099_p2 <= (tmp_16_1_reg_1374 or ap_const_lv8_6);
    sum_6_i_cast_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_6_i_fu_808_p2),64));
    sum_6_i_fu_808_p2 <= (tmp_3_reg_1167 or ap_const_lv8_6);
    sum_7_i1_cast_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_7_i1_fu_981_p2),64));
    sum_7_i1_fu_981_p2 <= (tmp_7_reg_1285 or ap_const_lv8_7);
    sum_7_i2_cast_fu_1114_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_7_i2_fu_1109_p2),64));
    sum_7_i2_fu_1109_p2 <= (tmp_16_1_reg_1374 or ap_const_lv8_7);
    sum_7_i_cast_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_7_i_fu_818_p2),64));
    sum_7_i_fu_818_p2 <= (tmp_3_reg_1167 or ap_const_lv8_7);
    t_addr_2_reg_1276 <= ap_const_lv64_87(8 - 1 downto 0);

    t_address0_assign_proc : process(ap_CS_fsm_state2, i_2_cast_reg_1258, ap_CS_fsm_state21, t_addr_2_reg_1276, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, i_5_lcssa_reg_659, ap_CS_fsm_state22, ap_CS_fsm_state24, tmp_fu_707_p1, tmp_7_cast_fu_915_p1, sum_3_i1_cast_fu_946_p1, sum_5_i1_cast_fu_966_p1, sum_7_i1_cast_fu_986_p1, sum_1_i2_cast_fu_1048_p1, sum_3_i2_cast_fu_1074_p1, sum_5_i2_cast_fu_1094_p1, sum_7_i2_cast_fu_1114_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            t_address0 <= sum_7_i2_cast_fu_1114_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            t_address0 <= sum_5_i2_cast_fu_1094_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            t_address0 <= sum_3_i2_cast_fu_1074_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            t_address0 <= sum_1_i2_cast_fu_1048_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            t_address0 <= sum_7_i1_cast_fu_986_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            t_address0 <= sum_5_i1_cast_fu_966_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            t_address0 <= sum_3_i1_cast_fu_946_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            t_address0 <= tmp_7_cast_fu_915_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            t_address0 <= t_addr_2_reg_1276;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            t_address0 <= ap_const_lv64_87(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            t_address0 <= i_2_cast_reg_1258(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            t_address0 <= i_5_lcssa_reg_659(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_address0 <= tmp_fu_707_p1(8 - 1 downto 0);
        else 
            t_address0 <= "XXXXXXXX";
        end if; 
    end process;


    t_address1_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, sum_1_i1_cast_fu_926_p1, sum_2_i1_cast_fu_936_p1, sum_4_i1_cast_fu_956_p1, sum_6_i1_cast_fu_976_p1, tmp_16_1_cast_fu_1037_p1, sum_2_i2_cast_fu_1064_p1, sum_4_i2_cast_fu_1084_p1, sum_6_i2_cast_fu_1104_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            t_address1 <= sum_6_i2_cast_fu_1104_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            t_address1 <= sum_4_i2_cast_fu_1084_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            t_address1 <= sum_2_i2_cast_fu_1064_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            t_address1 <= tmp_16_1_cast_fu_1037_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            t_address1 <= sum_6_i1_cast_fu_976_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            t_address1 <= sum_4_i1_cast_fu_956_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            t_address1 <= sum_2_i1_cast_fu_936_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            t_address1 <= sum_1_i1_cast_fu_926_p1(8 - 1 downto 0);
        else 
            t_address1 <= "XXXXXXXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_ce1_assign_proc : process(ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            t_ce1 <= ap_const_logic_1;
        else 
            t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(m_q0, ap_CS_fsm_state2, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state24, tmp_1_fu_889_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            t_d0 <= tmp_1_fu_889_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            t_d0 <= m_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            t_d0 <= ap_const_lv8_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_d0 <= ap_const_lv8_0;
        else 
            t_d0 <= "XXXXXXXX";
        end if; 
    end process;


    t_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state21, exitcond_fu_867_p2, ap_CS_fsm_state22, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (exitcond_fu_867_p2 = ap_const_lv1_1)))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_1005_p2 <= (s_q1 xor r_1_7_i1_fu_991_p9);
    tmp_15_1_fu_1023_p2 <= "1" when (i_7_s_fu_1012_p2 = ap_const_lv5_11) else "0";
    tmp_16_1_cast_fu_1037_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_1_fu_1029_p3),64));
    tmp_16_1_fu_1029_p3 <= (i_7_s_fu_1012_p2 & ap_const_lv3_0);
    tmp_18_1_fu_1133_p2 <= (s_q1 xor r_1_7_i2_fu_1119_p9);
    tmp_1_fu_889_p2 <= (t_q0 or ap_const_lv8_80);
    tmp_3_cast_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_744_p3),64));
    tmp_3_fu_744_p3 <= (i_1_reg_636 & ap_const_lv3_0);
    tmp_4_fu_873_p2 <= std_logic_vector(unsigned(i_2_reg_670) + unsigned(ap_const_lv8_1));
    tmp_5_fu_842_p2 <= (s_q1 xor r_1_7_i_fu_828_p9);
    tmp_6_fu_901_p2 <= "1" when (i_3_reg_681 = ap_const_lv5_11) else "0";
    tmp_7_cast_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_907_p3),64));
    tmp_7_fu_907_p3 <= (i_3_reg_681 & ap_const_lv3_0);
    tmp_8_fu_721_p2 <= "1" when (unsigned(ff_fu_718_p1) > unsigned(ap_const_lv8_87)) else "0";
    tmp_9_fu_732_p2 <= "1" when (i_1_reg_636 = ap_const_lv5_11) else "0";
    tmp_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_625),64));
    tmp_s_fu_712_p2 <= "1" when (invdar_reg_625 = ap_const_lv8_C7) else "0";
end behav;
