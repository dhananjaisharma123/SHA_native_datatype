// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "keccak_absorb.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic keccak_absorb::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic keccak_absorb::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<23> keccak_absorb::ap_ST_fsm_state1 = "1";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state2 = "10";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state3 = "100";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state4 = "1000";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state5 = "10000";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state6 = "100000";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state7 = "1000000";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state8 = "10000000";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state9 = "100000000";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state10 = "1000000000";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state11 = "10000000000";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state12 = "100000000000";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<23> keccak_absorb::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<32> keccak_absorb::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> keccak_absorb::ap_const_lv32_1 = "1";
const sc_lv<32> keccak_absorb::ap_const_lv32_9 = "1001";
const sc_lv<32> keccak_absorb::ap_const_lv32_A = "1010";
const sc_lv<32> keccak_absorb::ap_const_lv32_B = "1011";
const sc_lv<32> keccak_absorb::ap_const_lv32_E = "1110";
const sc_lv<1> keccak_absorb::ap_const_lv1_0 = "0";
const sc_lv<32> keccak_absorb::ap_const_lv32_F = "1111";
const sc_lv<32> keccak_absorb::ap_const_lv32_10 = "10000";
const sc_lv<32> keccak_absorb::ap_const_lv32_11 = "10001";
const sc_lv<32> keccak_absorb::ap_const_lv32_12 = "10010";
const sc_lv<32> keccak_absorb::ap_const_lv32_13 = "10011";
const sc_lv<32> keccak_absorb::ap_const_lv32_14 = "10100";
const sc_lv<32> keccak_absorb::ap_const_lv32_15 = "10101";
const sc_lv<8> keccak_absorb::ap_const_lv8_0 = "00000000";
const sc_lv<5> keccak_absorb::ap_const_lv5_0 = "00000";
const sc_lv<32> keccak_absorb::ap_const_lv32_D = "1101";
const sc_lv<32> keccak_absorb::ap_const_lv32_16 = "10110";
const sc_lv<64> keccak_absorb::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> keccak_absorb::ap_const_lv1_1 = "1";
const sc_lv<64> keccak_absorb::ap_const_lv64_1 = "1";
const sc_lv<32> keccak_absorb::ap_const_lv32_2 = "10";
const sc_lv<64> keccak_absorb::ap_const_lv64_2 = "10";
const sc_lv<64> keccak_absorb::ap_const_lv64_3 = "11";
const sc_lv<32> keccak_absorb::ap_const_lv32_3 = "11";
const sc_lv<64> keccak_absorb::ap_const_lv64_4 = "100";
const sc_lv<64> keccak_absorb::ap_const_lv64_5 = "101";
const sc_lv<32> keccak_absorb::ap_const_lv32_4 = "100";
const sc_lv<64> keccak_absorb::ap_const_lv64_6 = "110";
const sc_lv<64> keccak_absorb::ap_const_lv64_7 = "111";
const sc_lv<32> keccak_absorb::ap_const_lv32_5 = "101";
const sc_lv<64> keccak_absorb::ap_const_lv64_8 = "1000";
const sc_lv<64> keccak_absorb::ap_const_lv64_9 = "1001";
const sc_lv<32> keccak_absorb::ap_const_lv32_6 = "110";
const sc_lv<64> keccak_absorb::ap_const_lv64_A = "1010";
const sc_lv<64> keccak_absorb::ap_const_lv64_B = "1011";
const sc_lv<32> keccak_absorb::ap_const_lv32_7 = "111";
const sc_lv<64> keccak_absorb::ap_const_lv64_C = "1100";
const sc_lv<64> keccak_absorb::ap_const_lv64_D = "1101";
const sc_lv<32> keccak_absorb::ap_const_lv32_8 = "1000";
const sc_lv<64> keccak_absorb::ap_const_lv64_E = "1110";
const sc_lv<64> keccak_absorb::ap_const_lv64_F = "1111";
const sc_lv<64> keccak_absorb::ap_const_lv64_10 = "10000";
const sc_lv<64> keccak_absorb::ap_const_lv64_11 = "10001";
const sc_lv<64> keccak_absorb::ap_const_lv64_12 = "10010";
const sc_lv<64> keccak_absorb::ap_const_lv64_13 = "10011";
const sc_lv<64> keccak_absorb::ap_const_lv64_14 = "10100";
const sc_lv<64> keccak_absorb::ap_const_lv64_87 = "10000111";
const sc_lv<64> keccak_absorb::ap_const_lv64_15 = "10101";
const sc_lv<32> keccak_absorb::ap_const_lv32_C = "1100";
const sc_lv<64> keccak_absorb::ap_const_lv64_16 = "10110";
const sc_lv<64> keccak_absorb::ap_const_lv64_17 = "10111";
const sc_lv<64> keccak_absorb::ap_const_lv64_18 = "11000";
const sc_lv<8> keccak_absorb::ap_const_lv8_6 = "110";
const sc_lv<8> keccak_absorb::ap_const_lv8_1 = "1";
const sc_lv<8> keccak_absorb::ap_const_lv8_C7 = "11000111";
const sc_lv<8> keccak_absorb::ap_const_lv8_80 = "10000000";
const sc_lv<5> keccak_absorb::ap_const_lv5_11 = "10001";
const sc_lv<3> keccak_absorb::ap_const_lv3_0 = "000";
const sc_lv<8> keccak_absorb::ap_const_lv8_2 = "10";
const sc_lv<8> keccak_absorb::ap_const_lv8_3 = "11";
const sc_lv<8> keccak_absorb::ap_const_lv8_4 = "100";
const sc_lv<8> keccak_absorb::ap_const_lv8_5 = "101";
const sc_lv<8> keccak_absorb::ap_const_lv8_7 = "111";
const sc_lv<5> keccak_absorb::ap_const_lv5_1 = "1";
const sc_lv<5> keccak_absorb::ap_const_lv5_2 = "10";
const bool keccak_absorb::ap_const_boolean_1 = true;

keccak_absorb::keccak_absorb(sc_module_name name) : sc_module(name), mVcdFile(0) {
    t_U = new keccak_absorb_t("t_U");
    t_U->clk(ap_clk);
    t_U->reset(ap_rst);
    t_U->address0(t_address0);
    t_U->ce0(t_ce0);
    t_U->we0(t_we0);
    t_U->d0(t_d0);
    t_U->q0(t_q0);
    t_U->address1(t_address1);
    t_U->ce1(t_ce1);
    t_U->we1(t_we1);
    t_U->d1(t_d1);
    t_U->q1(t_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_2_reg_878 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( tmp_16_1_fu_732_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( tmp_2_reg_878 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( tmp_16_1_fu_732_p2 );

    SC_METHOD(thread_i_3_cast4_fu_605_p1);
    sensitive << ( i_3_reg_569 );

    SC_METHOD(thread_i_7_1_fu_762_p2);
    sensitive << ( i_3_reg_569 );

    SC_METHOD(thread_i_7_cast2_fu_727_p1);
    sensitive << ( i_7_s_fu_721_p2 );

    SC_METHOD(thread_i_7_s_fu_721_p2);
    sensitive << ( i_3_reg_569 );

    SC_METHOD(thread_indvarinc_fu_581_p2);
    sensitive << ( invdar_reg_558 );

    SC_METHOD(thread_m_address0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_m_ce0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_r_1_7_i1_fu_828_p9);
    sensitive << ( t_q1 );
    sensitive << ( t_q0 );
    sensitive << ( t_load_9_reg_1002 );
    sensitive << ( t_load_10_reg_1007 );
    sensitive << ( t_load_11_reg_1022 );
    sensitive << ( t_load_12_reg_1027 );
    sensitive << ( t_load_13_reg_1042 );
    sensitive << ( t_load_14_reg_1047 );

    SC_METHOD(thread_r_1_7_i_fu_700_p9);
    sensitive << ( t_q1 );
    sensitive << ( t_load_1_reg_908 );
    sensitive << ( t_q0 );
    sensitive << ( t_load_2_reg_913 );
    sensitive << ( t_load_3_reg_928 );
    sensitive << ( t_load_4_reg_933 );
    sensitive << ( t_load_5_reg_948 );
    sensitive << ( t_load_6_reg_953 );

    SC_METHOD(thread_s_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( s_addr_25_reg_902 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( s_addr_26_reg_991 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_s_address1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( s_addr_25_reg_902 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( s_addr_26_reg_991 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_s_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_s_ce1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_s_d0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_4_fu_714_p2 );
    sensitive << ( tmp_19_1_fu_842_p2 );

    SC_METHOD(thread_s_d1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_s_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_2_reg_878 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( tmp_s_fu_592_p2 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_s_we1);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_sum_1_i1_cast_fu_757_p1);
    sensitive << ( sum_1_i1_fu_751_p2 );

    SC_METHOD(thread_sum_1_i1_fu_751_p2);
    sensitive << ( tmp_17_1_fu_738_p3 );

    SC_METHOD(thread_sum_1_i_cast_fu_635_p1);
    sensitive << ( sum_1_i_fu_629_p2 );

    SC_METHOD(thread_sum_1_i_fu_629_p2);
    sensitive << ( tmp_3_fu_616_p3 );

    SC_METHOD(thread_sum_2_i1_cast_fu_773_p1);
    sensitive << ( sum_2_i1_fu_768_p2 );

    SC_METHOD(thread_sum_2_i1_fu_768_p2);
    sensitive << ( tmp_17_1_reg_971 );

    SC_METHOD(thread_sum_2_i_cast_fu_645_p1);
    sensitive << ( sum_2_i_fu_640_p2 );

    SC_METHOD(thread_sum_2_i_fu_640_p2);
    sensitive << ( tmp_3_reg_882 );

    SC_METHOD(thread_sum_3_i1_cast_fu_783_p1);
    sensitive << ( sum_3_i1_fu_778_p2 );

    SC_METHOD(thread_sum_3_i1_fu_778_p2);
    sensitive << ( tmp_17_1_reg_971 );

    SC_METHOD(thread_sum_3_i_cast_fu_655_p1);
    sensitive << ( sum_3_i_fu_650_p2 );

    SC_METHOD(thread_sum_3_i_fu_650_p2);
    sensitive << ( tmp_3_reg_882 );

    SC_METHOD(thread_sum_4_i1_cast_fu_793_p1);
    sensitive << ( sum_4_i1_fu_788_p2 );

    SC_METHOD(thread_sum_4_i1_fu_788_p2);
    sensitive << ( tmp_17_1_reg_971 );

    SC_METHOD(thread_sum_4_i_cast_fu_665_p1);
    sensitive << ( sum_4_i_fu_660_p2 );

    SC_METHOD(thread_sum_4_i_fu_660_p2);
    sensitive << ( tmp_3_reg_882 );

    SC_METHOD(thread_sum_5_i1_cast_fu_803_p1);
    sensitive << ( sum_5_i1_fu_798_p2 );

    SC_METHOD(thread_sum_5_i1_fu_798_p2);
    sensitive << ( tmp_17_1_reg_971 );

    SC_METHOD(thread_sum_5_i_cast_fu_675_p1);
    sensitive << ( sum_5_i_fu_670_p2 );

    SC_METHOD(thread_sum_5_i_fu_670_p2);
    sensitive << ( tmp_3_reg_882 );

    SC_METHOD(thread_sum_6_i1_cast_fu_813_p1);
    sensitive << ( sum_6_i1_fu_808_p2 );

    SC_METHOD(thread_sum_6_i1_fu_808_p2);
    sensitive << ( tmp_17_1_reg_971 );

    SC_METHOD(thread_sum_6_i_cast_fu_685_p1);
    sensitive << ( sum_6_i_fu_680_p2 );

    SC_METHOD(thread_sum_6_i_fu_680_p2);
    sensitive << ( tmp_3_reg_882 );

    SC_METHOD(thread_sum_7_i1_cast_fu_823_p1);
    sensitive << ( sum_7_i1_fu_818_p2 );

    SC_METHOD(thread_sum_7_i1_fu_818_p2);
    sensitive << ( tmp_17_1_reg_971 );

    SC_METHOD(thread_sum_7_i_cast_fu_695_p1);
    sensitive << ( sum_7_i_fu_690_p2 );

    SC_METHOD(thread_sum_7_i_fu_690_p2);
    sensitive << ( tmp_3_reg_882 );

    SC_METHOD(thread_t_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( tmp_fu_587_p1 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( sum_1_i_cast_fu_635_p1 );
    sensitive << ( sum_3_i_cast_fu_655_p1 );
    sensitive << ( sum_5_i_cast_fu_675_p1 );
    sensitive << ( sum_7_i_cast_fu_695_p1 );
    sensitive << ( sum_1_i1_cast_fu_757_p1 );
    sensitive << ( sum_3_i1_cast_fu_783_p1 );
    sensitive << ( sum_5_i1_cast_fu_803_p1 );
    sensitive << ( sum_7_i1_cast_fu_823_p1 );

    SC_METHOD(thread_t_address1);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_3_cast_fu_624_p1 );
    sensitive << ( sum_2_i_cast_fu_645_p1 );
    sensitive << ( sum_4_i_cast_fu_665_p1 );
    sensitive << ( sum_6_i_cast_fu_685_p1 );
    sensitive << ( tmp_17_1_cast_fu_746_p1 );
    sensitive << ( sum_2_i1_cast_fu_773_p1 );
    sensitive << ( sum_4_i1_cast_fu_793_p1 );
    sensitive << ( sum_6_i1_cast_fu_813_p1 );

    SC_METHOD(thread_t_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_t_ce1);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_t_d0);
    sensitive << ( m_q0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_1_fu_598_p2 );

    SC_METHOD(thread_t_d1);
    sensitive << ( m_q0 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_t_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_t_we1);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_tmp_16_1_fu_732_p2);
    sensitive << ( tmp_2_reg_878 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( i_7_s_fu_721_p2 );

    SC_METHOD(thread_tmp_17_1_cast_fu_746_p1);
    sensitive << ( tmp_17_1_fu_738_p3 );

    SC_METHOD(thread_tmp_17_1_fu_738_p3);
    sensitive << ( i_7_s_fu_721_p2 );

    SC_METHOD(thread_tmp_19_1_fu_842_p2);
    sensitive << ( s_q1 );
    sensitive << ( r_1_7_i1_fu_828_p9 );

    SC_METHOD(thread_tmp_1_fu_598_p2);
    sensitive << ( t_q1 );

    SC_METHOD(thread_tmp_2_fu_610_p2);
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( i_3_reg_569 );

    SC_METHOD(thread_tmp_3_cast_fu_624_p1);
    sensitive << ( tmp_3_fu_616_p3 );

    SC_METHOD(thread_tmp_3_fu_616_p3);
    sensitive << ( i_3_reg_569 );

    SC_METHOD(thread_tmp_4_fu_714_p2);
    sensitive << ( s_q1 );
    sensitive << ( r_1_7_i_fu_700_p9 );

    SC_METHOD(thread_tmp_fu_587_p1);
    sensitive << ( invdar_reg_558 );

    SC_METHOD(thread_tmp_s_fu_592_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( invdar_reg_558 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_2_fu_610_p2 );
    sensitive << ( tmp_2_reg_878 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( tmp_16_1_fu_732_p2 );
    sensitive << ( tmp_s_fu_592_p2 );

    ap_CS_fsm = "00000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "keccak_absorb_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, s_address0, "(port)s_address0");
    sc_trace(mVcdFile, s_ce0, "(port)s_ce0");
    sc_trace(mVcdFile, s_we0, "(port)s_we0");
    sc_trace(mVcdFile, s_d0, "(port)s_d0");
    sc_trace(mVcdFile, s_address1, "(port)s_address1");
    sc_trace(mVcdFile, s_ce1, "(port)s_ce1");
    sc_trace(mVcdFile, s_we1, "(port)s_we1");
    sc_trace(mVcdFile, s_d1, "(port)s_d1");
    sc_trace(mVcdFile, s_q1, "(port)s_q1");
    sc_trace(mVcdFile, m_address0, "(port)m_address0");
    sc_trace(mVcdFile, m_ce0, "(port)m_ce0");
    sc_trace(mVcdFile, m_q0, "(port)m_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, indvarinc_fu_581_p2, "indvarinc_fu_581_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, tmp_2_fu_610_p2, "tmp_2_fu_610_p2");
    sc_trace(mVcdFile, tmp_2_reg_878, "tmp_2_reg_878");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, tmp_3_fu_616_p3, "tmp_3_fu_616_p3");
    sc_trace(mVcdFile, tmp_3_reg_882, "tmp_3_reg_882");
    sc_trace(mVcdFile, s_addr_25_reg_902, "s_addr_25_reg_902");
    sc_trace(mVcdFile, t_q1, "t_q1");
    sc_trace(mVcdFile, t_load_1_reg_908, "t_load_1_reg_908");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, t_q0, "t_q0");
    sc_trace(mVcdFile, t_load_2_reg_913, "t_load_2_reg_913");
    sc_trace(mVcdFile, t_load_3_reg_928, "t_load_3_reg_928");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, t_load_4_reg_933, "t_load_4_reg_933");
    sc_trace(mVcdFile, t_load_5_reg_948, "t_load_5_reg_948");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, t_load_6_reg_953, "t_load_6_reg_953");
    sc_trace(mVcdFile, tmp_17_1_fu_738_p3, "tmp_17_1_fu_738_p3");
    sc_trace(mVcdFile, tmp_17_1_reg_971, "tmp_17_1_reg_971");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, tmp_16_1_fu_732_p2, "tmp_16_1_fu_732_p2");
    sc_trace(mVcdFile, s_addr_26_reg_991, "s_addr_26_reg_991");
    sc_trace(mVcdFile, i_7_1_fu_762_p2, "i_7_1_fu_762_p2");
    sc_trace(mVcdFile, i_7_1_reg_997, "i_7_1_reg_997");
    sc_trace(mVcdFile, t_load_9_reg_1002, "t_load_9_reg_1002");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, t_load_10_reg_1007, "t_load_10_reg_1007");
    sc_trace(mVcdFile, t_load_11_reg_1022, "t_load_11_reg_1022");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, t_load_12_reg_1027, "t_load_12_reg_1027");
    sc_trace(mVcdFile, t_load_13_reg_1042, "t_load_13_reg_1042");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, t_load_14_reg_1047, "t_load_14_reg_1047");
    sc_trace(mVcdFile, t_address0, "t_address0");
    sc_trace(mVcdFile, t_ce0, "t_ce0");
    sc_trace(mVcdFile, t_we0, "t_we0");
    sc_trace(mVcdFile, t_d0, "t_d0");
    sc_trace(mVcdFile, t_address1, "t_address1");
    sc_trace(mVcdFile, t_ce1, "t_ce1");
    sc_trace(mVcdFile, t_we1, "t_we1");
    sc_trace(mVcdFile, t_d1, "t_d1");
    sc_trace(mVcdFile, invdar_reg_558, "invdar_reg_558");
    sc_trace(mVcdFile, tmp_s_fu_592_p2, "tmp_s_fu_592_p2");
    sc_trace(mVcdFile, i_3_reg_569, "i_3_reg_569");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, tmp_fu_587_p1, "tmp_fu_587_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, tmp_3_cast_fu_624_p1, "tmp_3_cast_fu_624_p1");
    sc_trace(mVcdFile, sum_1_i_cast_fu_635_p1, "sum_1_i_cast_fu_635_p1");
    sc_trace(mVcdFile, i_3_cast4_fu_605_p1, "i_3_cast4_fu_605_p1");
    sc_trace(mVcdFile, sum_2_i_cast_fu_645_p1, "sum_2_i_cast_fu_645_p1");
    sc_trace(mVcdFile, sum_3_i_cast_fu_655_p1, "sum_3_i_cast_fu_655_p1");
    sc_trace(mVcdFile, sum_4_i_cast_fu_665_p1, "sum_4_i_cast_fu_665_p1");
    sc_trace(mVcdFile, sum_5_i_cast_fu_675_p1, "sum_5_i_cast_fu_675_p1");
    sc_trace(mVcdFile, sum_6_i_cast_fu_685_p1, "sum_6_i_cast_fu_685_p1");
    sc_trace(mVcdFile, sum_7_i_cast_fu_695_p1, "sum_7_i_cast_fu_695_p1");
    sc_trace(mVcdFile, tmp_17_1_cast_fu_746_p1, "tmp_17_1_cast_fu_746_p1");
    sc_trace(mVcdFile, sum_1_i1_cast_fu_757_p1, "sum_1_i1_cast_fu_757_p1");
    sc_trace(mVcdFile, i_7_cast2_fu_727_p1, "i_7_cast2_fu_727_p1");
    sc_trace(mVcdFile, sum_2_i1_cast_fu_773_p1, "sum_2_i1_cast_fu_773_p1");
    sc_trace(mVcdFile, sum_3_i1_cast_fu_783_p1, "sum_3_i1_cast_fu_783_p1");
    sc_trace(mVcdFile, sum_4_i1_cast_fu_793_p1, "sum_4_i1_cast_fu_793_p1");
    sc_trace(mVcdFile, sum_5_i1_cast_fu_803_p1, "sum_5_i1_cast_fu_803_p1");
    sc_trace(mVcdFile, sum_6_i1_cast_fu_813_p1, "sum_6_i1_cast_fu_813_p1");
    sc_trace(mVcdFile, sum_7_i1_cast_fu_823_p1, "sum_7_i1_cast_fu_823_p1");
    sc_trace(mVcdFile, tmp_1_fu_598_p2, "tmp_1_fu_598_p2");
    sc_trace(mVcdFile, tmp_4_fu_714_p2, "tmp_4_fu_714_p2");
    sc_trace(mVcdFile, tmp_19_1_fu_842_p2, "tmp_19_1_fu_842_p2");
    sc_trace(mVcdFile, sum_1_i_fu_629_p2, "sum_1_i_fu_629_p2");
    sc_trace(mVcdFile, sum_2_i_fu_640_p2, "sum_2_i_fu_640_p2");
    sc_trace(mVcdFile, sum_3_i_fu_650_p2, "sum_3_i_fu_650_p2");
    sc_trace(mVcdFile, sum_4_i_fu_660_p2, "sum_4_i_fu_660_p2");
    sc_trace(mVcdFile, sum_5_i_fu_670_p2, "sum_5_i_fu_670_p2");
    sc_trace(mVcdFile, sum_6_i_fu_680_p2, "sum_6_i_fu_680_p2");
    sc_trace(mVcdFile, sum_7_i_fu_690_p2, "sum_7_i_fu_690_p2");
    sc_trace(mVcdFile, r_1_7_i_fu_700_p9, "r_1_7_i_fu_700_p9");
    sc_trace(mVcdFile, i_7_s_fu_721_p2, "i_7_s_fu_721_p2");
    sc_trace(mVcdFile, sum_1_i1_fu_751_p2, "sum_1_i1_fu_751_p2");
    sc_trace(mVcdFile, sum_2_i1_fu_768_p2, "sum_2_i1_fu_768_p2");
    sc_trace(mVcdFile, sum_3_i1_fu_778_p2, "sum_3_i1_fu_778_p2");
    sc_trace(mVcdFile, sum_4_i1_fu_788_p2, "sum_4_i1_fu_788_p2");
    sc_trace(mVcdFile, sum_5_i1_fu_798_p2, "sum_5_i1_fu_798_p2");
    sc_trace(mVcdFile, sum_6_i1_fu_808_p2, "sum_6_i1_fu_808_p2");
    sc_trace(mVcdFile, sum_7_i1_fu_818_p2, "sum_7_i1_fu_818_p2");
    sc_trace(mVcdFile, r_1_7_i1_fu_828_p9, "r_1_7_i1_fu_828_p9");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

keccak_absorb::~keccak_absorb() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete t_U;
}

void keccak_absorb::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        i_3_reg_569 = i_7_1_reg_997.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        i_3_reg_569 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_592_p2.read()))) {
        invdar_reg_558 = indvarinc_fu_581_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        invdar_reg_558 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(tmp_2_reg_878.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_16_1_fu_732_p2.read()))) {
        i_7_1_reg_997 = i_7_1_fu_762_p2.read();
        s_addr_26_reg_991 =  (sc_lv<5>) (i_7_cast2_fu_727_p1.read());
        tmp_17_1_reg_971 = tmp_17_1_fu_738_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(tmp_2_fu_610_p2.read(), ap_const_lv1_0))) {
        s_addr_25_reg_902 =  (sc_lv<5>) (i_3_cast4_fu_605_p1.read());
        tmp_3_reg_882 = tmp_3_fu_616_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        t_load_10_reg_1007 = t_q0.read();
        t_load_9_reg_1002 = t_q1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        t_load_11_reg_1022 = t_q1.read();
        t_load_12_reg_1027 = t_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        t_load_13_reg_1042 = t_q1.read();
        t_load_14_reg_1047 = t_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        t_load_1_reg_908 = t_q1.read();
        t_load_2_reg_913 = t_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        t_load_3_reg_928 = t_q1.read();
        t_load_4_reg_933 = t_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        t_load_5_reg_948 = t_q1.read();
        t_load_6_reg_953 = t_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        tmp_2_reg_878 = tmp_2_fu_610_p2.read();
    }
}

void keccak_absorb::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void keccak_absorb::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void keccak_absorb::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void keccak_absorb::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void keccak_absorb::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void keccak_absorb::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void keccak_absorb::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void keccak_absorb::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void keccak_absorb::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void keccak_absorb::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void keccak_absorb::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void keccak_absorb::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void keccak_absorb::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void keccak_absorb::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void keccak_absorb::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void keccak_absorb::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void keccak_absorb::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void keccak_absorb::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void keccak_absorb::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void keccak_absorb::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void keccak_absorb::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void keccak_absorb::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void keccak_absorb::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void keccak_absorb::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
          (esl_seteq<1,1,1>(tmp_16_1_fu_732_p2.read(), ap_const_lv1_1) || 
           esl_seteq<1,1,1>(tmp_2_reg_878.read(), ap_const_lv1_1))))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void keccak_absorb::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void keccak_absorb::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
         (esl_seteq<1,1,1>(tmp_16_1_fu_732_p2.read(), ap_const_lv1_1) || 
          esl_seteq<1,1,1>(tmp_2_reg_878.read(), ap_const_lv1_1)))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void keccak_absorb::thread_i_3_cast4_fu_605_p1() {
    i_3_cast4_fu_605_p1 = esl_zext<64,5>(i_3_reg_569.read());
}

void keccak_absorb::thread_i_7_1_fu_762_p2() {
    i_7_1_fu_762_p2 = (!i_3_reg_569.read().is_01() || !ap_const_lv5_2.is_01())? sc_lv<5>(): (sc_biguint<5>(i_3_reg_569.read()) + sc_biguint<5>(ap_const_lv5_2));
}

void keccak_absorb::thread_i_7_cast2_fu_727_p1() {
    i_7_cast2_fu_727_p1 = esl_zext<64,5>(i_7_s_fu_721_p2.read());
}

void keccak_absorb::thread_i_7_s_fu_721_p2() {
    i_7_s_fu_721_p2 = (i_3_reg_569.read() | ap_const_lv5_1);
}

void keccak_absorb::thread_indvarinc_fu_581_p2() {
    indvarinc_fu_581_p2 = (!invdar_reg_558.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(invdar_reg_558.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void keccak_absorb::thread_m_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        m_address0 =  (sc_lv<2>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        m_address0 =  (sc_lv<2>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        m_address0 =  (sc_lv<2>) (ap_const_lv64_0);
    } else {
        m_address0 = "XX";
    }
}

void keccak_absorb::thread_m_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        m_ce0 = ap_const_logic_1;
    } else {
        m_ce0 = ap_const_logic_0;
    }
}

void keccak_absorb::thread_r_1_7_i1_fu_828_p9() {
    r_1_7_i1_fu_828_p9 = esl_concat<56,8>(esl_concat<48,8>(esl_concat<40,8>(esl_concat<32,8>(esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(t_q0.read(), t_q1.read()), t_load_14_reg_1047.read()), t_load_13_reg_1042.read()), t_load_12_reg_1027.read()), t_load_11_reg_1022.read()), t_load_10_reg_1007.read()), t_load_9_reg_1002.read());
}

void keccak_absorb::thread_r_1_7_i_fu_700_p9() {
    r_1_7_i_fu_700_p9 = esl_concat<56,8>(esl_concat<48,8>(esl_concat<40,8>(esl_concat<32,8>(esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(t_q0.read(), t_q1.read()), t_load_6_reg_953.read()), t_load_5_reg_948.read()), t_load_4_reg_933.read()), t_load_3_reg_928.read()), t_load_2_reg_913.read()), t_load_1_reg_908.read());
}

void keccak_absorb::thread_s_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        s_address0 = s_addr_26_reg_991.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        s_address0 = s_addr_25_reg_902.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        s_address0 =  (sc_lv<5>) (ap_const_lv64_18);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        s_address0 =  (sc_lv<5>) (ap_const_lv64_16);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        s_address0 =  (sc_lv<5>) (ap_const_lv64_14);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        s_address0 =  (sc_lv<5>) (ap_const_lv64_12);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        s_address0 =  (sc_lv<5>) (ap_const_lv64_10);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        s_address0 =  (sc_lv<5>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        s_address0 =  (sc_lv<5>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        s_address0 =  (sc_lv<5>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        s_address0 =  (sc_lv<5>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        s_address0 =  (sc_lv<5>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        s_address0 =  (sc_lv<5>) (ap_const_lv64_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        s_address0 =  (sc_lv<5>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        s_address0 =  (sc_lv<5>) (ap_const_lv64_0);
    } else {
        s_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void keccak_absorb::thread_s_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        s_address1 = s_addr_26_reg_991.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        s_address1 = s_addr_25_reg_902.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        s_address1 =  (sc_lv<5>) (ap_const_lv64_17);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        s_address1 =  (sc_lv<5>) (ap_const_lv64_15);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        s_address1 =  (sc_lv<5>) (ap_const_lv64_13);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        s_address1 =  (sc_lv<5>) (ap_const_lv64_11);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        s_address1 =  (sc_lv<5>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        s_address1 =  (sc_lv<5>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        s_address1 =  (sc_lv<5>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        s_address1 =  (sc_lv<5>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        s_address1 =  (sc_lv<5>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        s_address1 =  (sc_lv<5>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        s_address1 =  (sc_lv<5>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        s_address1 =  (sc_lv<5>) (ap_const_lv64_2);
    } else {
        s_address1 =  (sc_lv<5>) ("XXXXX");
    }
}

void keccak_absorb::thread_s_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        s_ce0 = ap_const_logic_1;
    } else {
        s_ce0 = ap_const_logic_0;
    }
}

void keccak_absorb::thread_s_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        s_ce1 = ap_const_logic_1;
    } else {
        s_ce1 = ap_const_logic_0;
    }
}

void keccak_absorb::thread_s_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        s_d0 = tmp_19_1_fu_842_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        s_d0 = tmp_4_fu_714_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        s_d0 = ap_const_lv64_0;
    } else {
        s_d0 =  (sc_lv<64>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void keccak_absorb::thread_s_d1() {
    s_d1 = ap_const_lv64_0;
}

void keccak_absorb::thread_s_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(tmp_s_fu_592_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
          esl_seteq<1,1,1>(tmp_2_reg_878.read(), ap_const_lv1_0)))) {
        s_we0 = ap_const_logic_1;
    } else {
        s_we0 = ap_const_logic_0;
    }
}

void keccak_absorb::thread_s_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        s_we1 = ap_const_logic_1;
    } else {
        s_we1 = ap_const_logic_0;
    }
}

void keccak_absorb::thread_sum_1_i1_cast_fu_757_p1() {
    sum_1_i1_cast_fu_757_p1 = esl_zext<64,8>(sum_1_i1_fu_751_p2.read());
}

void keccak_absorb::thread_sum_1_i1_fu_751_p2() {
    sum_1_i1_fu_751_p2 = (tmp_17_1_fu_738_p3.read() | ap_const_lv8_1);
}

void keccak_absorb::thread_sum_1_i_cast_fu_635_p1() {
    sum_1_i_cast_fu_635_p1 = esl_zext<64,8>(sum_1_i_fu_629_p2.read());
}

void keccak_absorb::thread_sum_1_i_fu_629_p2() {
    sum_1_i_fu_629_p2 = (tmp_3_fu_616_p3.read() | ap_const_lv8_1);
}

void keccak_absorb::thread_sum_2_i1_cast_fu_773_p1() {
    sum_2_i1_cast_fu_773_p1 = esl_zext<64,8>(sum_2_i1_fu_768_p2.read());
}

void keccak_absorb::thread_sum_2_i1_fu_768_p2() {
    sum_2_i1_fu_768_p2 = (tmp_17_1_reg_971.read() | ap_const_lv8_2);
}

void keccak_absorb::thread_sum_2_i_cast_fu_645_p1() {
    sum_2_i_cast_fu_645_p1 = esl_zext<64,8>(sum_2_i_fu_640_p2.read());
}

void keccak_absorb::thread_sum_2_i_fu_640_p2() {
    sum_2_i_fu_640_p2 = (tmp_3_reg_882.read() | ap_const_lv8_2);
}

void keccak_absorb::thread_sum_3_i1_cast_fu_783_p1() {
    sum_3_i1_cast_fu_783_p1 = esl_zext<64,8>(sum_3_i1_fu_778_p2.read());
}

void keccak_absorb::thread_sum_3_i1_fu_778_p2() {
    sum_3_i1_fu_778_p2 = (tmp_17_1_reg_971.read() | ap_const_lv8_3);
}

void keccak_absorb::thread_sum_3_i_cast_fu_655_p1() {
    sum_3_i_cast_fu_655_p1 = esl_zext<64,8>(sum_3_i_fu_650_p2.read());
}

void keccak_absorb::thread_sum_3_i_fu_650_p2() {
    sum_3_i_fu_650_p2 = (tmp_3_reg_882.read() | ap_const_lv8_3);
}

void keccak_absorb::thread_sum_4_i1_cast_fu_793_p1() {
    sum_4_i1_cast_fu_793_p1 = esl_zext<64,8>(sum_4_i1_fu_788_p2.read());
}

void keccak_absorb::thread_sum_4_i1_fu_788_p2() {
    sum_4_i1_fu_788_p2 = (tmp_17_1_reg_971.read() | ap_const_lv8_4);
}

void keccak_absorb::thread_sum_4_i_cast_fu_665_p1() {
    sum_4_i_cast_fu_665_p1 = esl_zext<64,8>(sum_4_i_fu_660_p2.read());
}

void keccak_absorb::thread_sum_4_i_fu_660_p2() {
    sum_4_i_fu_660_p2 = (tmp_3_reg_882.read() | ap_const_lv8_4);
}

void keccak_absorb::thread_sum_5_i1_cast_fu_803_p1() {
    sum_5_i1_cast_fu_803_p1 = esl_zext<64,8>(sum_5_i1_fu_798_p2.read());
}

void keccak_absorb::thread_sum_5_i1_fu_798_p2() {
    sum_5_i1_fu_798_p2 = (tmp_17_1_reg_971.read() | ap_const_lv8_5);
}

void keccak_absorb::thread_sum_5_i_cast_fu_675_p1() {
    sum_5_i_cast_fu_675_p1 = esl_zext<64,8>(sum_5_i_fu_670_p2.read());
}

void keccak_absorb::thread_sum_5_i_fu_670_p2() {
    sum_5_i_fu_670_p2 = (tmp_3_reg_882.read() | ap_const_lv8_5);
}

void keccak_absorb::thread_sum_6_i1_cast_fu_813_p1() {
    sum_6_i1_cast_fu_813_p1 = esl_zext<64,8>(sum_6_i1_fu_808_p2.read());
}

void keccak_absorb::thread_sum_6_i1_fu_808_p2() {
    sum_6_i1_fu_808_p2 = (tmp_17_1_reg_971.read() | ap_const_lv8_6);
}

void keccak_absorb::thread_sum_6_i_cast_fu_685_p1() {
    sum_6_i_cast_fu_685_p1 = esl_zext<64,8>(sum_6_i_fu_680_p2.read());
}

void keccak_absorb::thread_sum_6_i_fu_680_p2() {
    sum_6_i_fu_680_p2 = (tmp_3_reg_882.read() | ap_const_lv8_6);
}

void keccak_absorb::thread_sum_7_i1_cast_fu_823_p1() {
    sum_7_i1_cast_fu_823_p1 = esl_zext<64,8>(sum_7_i1_fu_818_p2.read());
}

void keccak_absorb::thread_sum_7_i1_fu_818_p2() {
    sum_7_i1_fu_818_p2 = (tmp_17_1_reg_971.read() | ap_const_lv8_7);
}

void keccak_absorb::thread_sum_7_i_cast_fu_695_p1() {
    sum_7_i_cast_fu_695_p1 = esl_zext<64,8>(sum_7_i_fu_690_p2.read());
}

void keccak_absorb::thread_sum_7_i_fu_690_p2() {
    sum_7_i_fu_690_p2 = (tmp_3_reg_882.read() | ap_const_lv8_7);
}

void keccak_absorb::thread_t_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        t_address0 =  (sc_lv<8>) (sum_7_i1_cast_fu_823_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        t_address0 =  (sc_lv<8>) (sum_5_i1_cast_fu_803_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        t_address0 =  (sc_lv<8>) (sum_3_i1_cast_fu_783_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        t_address0 =  (sc_lv<8>) (sum_1_i1_cast_fu_757_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        t_address0 =  (sc_lv<8>) (sum_7_i_cast_fu_695_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        t_address0 =  (sc_lv<8>) (sum_5_i_cast_fu_675_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        t_address0 =  (sc_lv<8>) (sum_3_i_cast_fu_655_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        t_address0 =  (sc_lv<8>) (sum_1_i_cast_fu_635_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        t_address0 =  (sc_lv<8>) (ap_const_lv64_87);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        t_address0 =  (sc_lv<8>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        t_address0 =  (sc_lv<8>) (ap_const_lv64_0);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        t_address0 =  (sc_lv<8>) (tmp_fu_587_p1.read());
    } else {
        t_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void keccak_absorb::thread_t_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        t_address1 =  (sc_lv<8>) (sum_6_i1_cast_fu_813_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        t_address1 =  (sc_lv<8>) (sum_4_i1_cast_fu_793_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        t_address1 =  (sc_lv<8>) (sum_2_i1_cast_fu_773_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        t_address1 =  (sc_lv<8>) (tmp_17_1_cast_fu_746_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        t_address1 =  (sc_lv<8>) (sum_6_i_cast_fu_685_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        t_address1 =  (sc_lv<8>) (sum_4_i_cast_fu_665_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        t_address1 =  (sc_lv<8>) (sum_2_i_cast_fu_645_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        t_address1 =  (sc_lv<8>) (tmp_3_cast_fu_624_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        t_address1 =  (sc_lv<8>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        t_address1 =  (sc_lv<8>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        t_address1 =  (sc_lv<8>) (ap_const_lv64_87);
    } else {
        t_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void keccak_absorb::thread_t_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        t_ce0 = ap_const_logic_1;
    } else {
        t_ce0 = ap_const_logic_0;
    }
}

void keccak_absorb::thread_t_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        t_ce1 = ap_const_logic_1;
    } else {
        t_ce1 = ap_const_logic_0;
    }
}

void keccak_absorb::thread_t_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        t_d0 = tmp_1_fu_598_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        t_d0 = m_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        t_d0 = ap_const_lv8_0;
    } else {
        t_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void keccak_absorb::thread_t_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        t_d1 = ap_const_lv8_6;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        t_d1 = m_q0.read();
    } else {
        t_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void keccak_absorb::thread_t_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        t_we0 = ap_const_logic_1;
    } else {
        t_we0 = ap_const_logic_0;
    }
}

void keccak_absorb::thread_t_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        t_we1 = ap_const_logic_1;
    } else {
        t_we1 = ap_const_logic_0;
    }
}

void keccak_absorb::thread_tmp_16_1_fu_732_p2() {
    tmp_16_1_fu_732_p2 = (!i_7_s_fu_721_p2.read().is_01() || !ap_const_lv5_11.is_01())? sc_lv<1>(): sc_lv<1>(i_7_s_fu_721_p2.read() == ap_const_lv5_11);
}

void keccak_absorb::thread_tmp_17_1_cast_fu_746_p1() {
    tmp_17_1_cast_fu_746_p1 = esl_zext<64,8>(tmp_17_1_fu_738_p3.read());
}

void keccak_absorb::thread_tmp_17_1_fu_738_p3() {
    tmp_17_1_fu_738_p3 = esl_concat<5,3>(i_7_s_fu_721_p2.read(), ap_const_lv3_0);
}

void keccak_absorb::thread_tmp_19_1_fu_842_p2() {
    tmp_19_1_fu_842_p2 = (s_q1.read() ^ r_1_7_i1_fu_828_p9.read());
}

void keccak_absorb::thread_tmp_1_fu_598_p2() {
    tmp_1_fu_598_p2 = (t_q1.read() | ap_const_lv8_80);
}

void keccak_absorb::thread_tmp_2_fu_610_p2() {
    tmp_2_fu_610_p2 = (!i_3_reg_569.read().is_01() || !ap_const_lv5_11.is_01())? sc_lv<1>(): sc_lv<1>(i_3_reg_569.read() == ap_const_lv5_11);
}

void keccak_absorb::thread_tmp_3_cast_fu_624_p1() {
    tmp_3_cast_fu_624_p1 = esl_zext<64,8>(tmp_3_fu_616_p3.read());
}

void keccak_absorb::thread_tmp_3_fu_616_p3() {
    tmp_3_fu_616_p3 = esl_concat<5,3>(i_3_reg_569.read(), ap_const_lv3_0);
}

void keccak_absorb::thread_tmp_4_fu_714_p2() {
    tmp_4_fu_714_p2 = (s_q1.read() ^ r_1_7_i_fu_700_p9.read());
}

void keccak_absorb::thread_tmp_fu_587_p1() {
    tmp_fu_587_p1 = esl_zext<64,8>(invdar_reg_558.read());
}

void keccak_absorb::thread_tmp_s_fu_592_p2() {
    tmp_s_fu_592_p2 = (!invdar_reg_558.read().is_01() || !ap_const_lv8_C7.is_01())? sc_lv<1>(): sc_lv<1>(invdar_reg_558.read() == ap_const_lv8_C7);
}

void keccak_absorb::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_s_fu_592_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(tmp_2_fu_610_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && (esl_seteq<1,1,1>(tmp_16_1_fu_732_p2.read(), ap_const_lv1_1) || 
  esl_seteq<1,1,1>(tmp_2_reg_878.read(), ap_const_lv1_1)))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state20;
            }
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<23>) ("XXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

