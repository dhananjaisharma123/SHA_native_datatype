// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keccak_absorb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s_address0,
        s_ce0,
        s_we0,
        s_d0,
        s_address1,
        s_ce1,
        s_we1,
        s_d1,
        s_q1,
        m_address0,
        m_ce0,
        m_q0
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] s_address0;
output   s_ce0;
output   s_we0;
output  [63:0] s_d0;
output  [4:0] s_address1;
output   s_ce1;
output   s_we1;
output  [63:0] s_d1;
input  [63:0] s_q1;
output  [1:0] m_address0;
output   m_ce0;
input  [7:0] m_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] s_address0;
reg s_ce0;
reg s_we0;
reg[63:0] s_d0;
reg[4:0] s_address1;
reg s_ce1;
reg s_we1;
reg[1:0] m_address0;
reg m_ce0;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] indvarinc_fu_581_p2;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_2_fu_610_p2;
reg   [0:0] tmp_2_reg_878;
wire    ap_CS_fsm_state15;
wire   [7:0] tmp_3_fu_616_p3;
reg   [7:0] tmp_3_reg_882;
reg   [4:0] s_addr_25_reg_902;
wire   [7:0] t_q1;
reg   [7:0] t_load_1_reg_908;
wire    ap_CS_fsm_state16;
wire   [7:0] t_q0;
reg   [7:0] t_load_2_reg_913;
reg   [7:0] t_load_3_reg_928;
wire    ap_CS_fsm_state17;
reg   [7:0] t_load_4_reg_933;
reg   [7:0] t_load_5_reg_948;
wire    ap_CS_fsm_state18;
reg   [7:0] t_load_6_reg_953;
wire   [7:0] tmp_17_1_fu_738_p3;
reg   [7:0] tmp_17_1_reg_971;
wire    ap_CS_fsm_state19;
wire   [0:0] tmp_16_1_fu_732_p2;
reg   [4:0] s_addr_26_reg_991;
wire   [4:0] i_7_1_fu_762_p2;
reg   [4:0] i_7_1_reg_997;
reg   [7:0] t_load_9_reg_1002;
wire    ap_CS_fsm_state20;
reg   [7:0] t_load_10_reg_1007;
reg   [7:0] t_load_11_reg_1022;
wire    ap_CS_fsm_state21;
reg   [7:0] t_load_12_reg_1027;
reg   [7:0] t_load_13_reg_1042;
wire    ap_CS_fsm_state22;
reg   [7:0] t_load_14_reg_1047;
reg   [7:0] t_address0;
reg    t_ce0;
reg    t_we0;
reg   [7:0] t_d0;
reg   [7:0] t_address1;
reg    t_ce1;
reg    t_we1;
reg   [7:0] t_d1;
reg   [7:0] invdar_reg_558;
wire   [0:0] tmp_s_fu_592_p2;
reg   [4:0] i_3_reg_569;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state23;
wire   [63:0] tmp_fu_587_p1;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state13;
wire   [63:0] tmp_3_cast_fu_624_p1;
wire   [63:0] sum_1_i_cast_fu_635_p1;
wire   [63:0] i_3_cast4_fu_605_p1;
wire   [63:0] sum_2_i_cast_fu_645_p1;
wire   [63:0] sum_3_i_cast_fu_655_p1;
wire   [63:0] sum_4_i_cast_fu_665_p1;
wire   [63:0] sum_5_i_cast_fu_675_p1;
wire   [63:0] sum_6_i_cast_fu_685_p1;
wire   [63:0] sum_7_i_cast_fu_695_p1;
wire   [63:0] tmp_17_1_cast_fu_746_p1;
wire   [63:0] sum_1_i1_cast_fu_757_p1;
wire   [63:0] i_7_cast2_fu_727_p1;
wire   [63:0] sum_2_i1_cast_fu_773_p1;
wire   [63:0] sum_3_i1_cast_fu_783_p1;
wire   [63:0] sum_4_i1_cast_fu_793_p1;
wire   [63:0] sum_5_i1_cast_fu_803_p1;
wire   [63:0] sum_6_i1_cast_fu_813_p1;
wire   [63:0] sum_7_i1_cast_fu_823_p1;
wire   [7:0] tmp_1_fu_598_p2;
wire   [63:0] tmp_4_fu_714_p2;
wire   [63:0] tmp_19_1_fu_842_p2;
wire   [7:0] sum_1_i_fu_629_p2;
wire   [7:0] sum_2_i_fu_640_p2;
wire   [7:0] sum_3_i_fu_650_p2;
wire   [7:0] sum_4_i_fu_660_p2;
wire   [7:0] sum_5_i_fu_670_p2;
wire   [7:0] sum_6_i_fu_680_p2;
wire   [7:0] sum_7_i_fu_690_p2;
wire   [63:0] r_1_7_i_fu_700_p9;
wire   [4:0] i_7_s_fu_721_p2;
wire   [7:0] sum_1_i1_fu_751_p2;
wire   [7:0] sum_2_i1_fu_768_p2;
wire   [7:0] sum_3_i1_fu_778_p2;
wire   [7:0] sum_4_i1_fu_788_p2;
wire   [7:0] sum_5_i1_fu_798_p2;
wire   [7:0] sum_6_i1_fu_808_p2;
wire   [7:0] sum_7_i1_fu_818_p2;
wire   [63:0] r_1_7_i1_fu_828_p9;
reg   [22:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
end

keccak_absorb_t #(
    .DataWidth( 8 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
t_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(t_address0),
    .ce0(t_ce0),
    .we0(t_we0),
    .d0(t_d0),
    .q0(t_q0),
    .address1(t_address1),
    .ce1(t_ce1),
    .we1(t_we1),
    .d1(t_d1),
    .q1(t_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_3_reg_569 <= i_7_1_reg_997;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        i_3_reg_569 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_592_p2 == 1'd0))) begin
        invdar_reg_558 <= indvarinc_fu_581_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        invdar_reg_558 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_reg_878 == 1'd0) & (1'b1 == ap_CS_fsm_state19) & (tmp_16_1_fu_732_p2 == 1'd0))) begin
        i_7_1_reg_997 <= i_7_1_fu_762_p2;
        s_addr_26_reg_991[4 : 1] <= i_7_cast2_fu_727_p1[4 : 1];
        tmp_17_1_reg_971[7 : 4] <= tmp_17_1_fu_738_p3[7 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_610_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        s_addr_25_reg_902 <= i_3_cast4_fu_605_p1;
        tmp_3_reg_882[7 : 3] <= tmp_3_fu_616_p3[7 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        t_load_10_reg_1007 <= t_q0;
        t_load_9_reg_1002 <= t_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        t_load_11_reg_1022 <= t_q1;
        t_load_12_reg_1027 <= t_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        t_load_13_reg_1042 <= t_q1;
        t_load_14_reg_1047 <= t_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        t_load_1_reg_908 <= t_q1;
        t_load_2_reg_913 <= t_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        t_load_3_reg_928 <= t_q1;
        t_load_4_reg_933 <= t_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        t_load_5_reg_948 <= t_q1;
        t_load_6_reg_953 <= t_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_2_reg_878 <= tmp_2_fu_610_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state19) & ((tmp_2_reg_878 == 1'd1) | (tmp_16_1_fu_732_p2 == 1'd1))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) & ((tmp_2_reg_878 == 1'd1) | (tmp_16_1_fu_732_p2 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        m_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        m_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        m_address0 = 64'd0;
    end else begin
        m_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        m_ce0 = 1'b1;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        s_address0 = s_addr_26_reg_991;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        s_address0 = s_addr_25_reg_902;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        s_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        s_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        s_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        s_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        s_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        s_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        s_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        s_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        s_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        s_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        s_address0 = 64'd0;
    end else begin
        s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        s_address1 = s_addr_26_reg_991;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        s_address1 = s_addr_25_reg_902;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        s_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        s_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        s_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        s_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        s_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        s_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        s_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        s_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        s_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        s_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        s_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        s_address1 = 64'd2;
    end else begin
        s_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state19))) begin
        s_ce0 = 1'b1;
    end else begin
        s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18))) begin
        s_ce1 = 1'b1;
    end else begin
        s_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        s_d0 = tmp_19_1_fu_842_p2;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        s_d0 = tmp_4_fu_714_p2;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state14))) begin
        s_d0 = 64'd0;
    end else begin
        s_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state14) | ((tmp_s_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((tmp_2_reg_878 == 1'd0) & (1'b1 == ap_CS_fsm_state19)))) begin
        s_we0 = 1'b1;
    end else begin
        s_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state14))) begin
        s_we1 = 1'b1;
    end else begin
        s_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        t_address0 = sum_7_i1_cast_fu_823_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        t_address0 = sum_5_i1_cast_fu_803_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        t_address0 = sum_3_i1_cast_fu_783_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        t_address0 = sum_1_i1_cast_fu_757_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        t_address0 = sum_7_i_cast_fu_695_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        t_address0 = sum_5_i_cast_fu_675_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        t_address0 = sum_3_i_cast_fu_655_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        t_address0 = sum_1_i_cast_fu_635_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        t_address0 = 64'd135;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        t_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        t_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_address0 = tmp_fu_587_p1;
    end else begin
        t_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        t_address1 = sum_6_i1_cast_fu_813_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        t_address1 = sum_4_i1_cast_fu_793_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        t_address1 = sum_2_i1_cast_fu_773_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        t_address1 = tmp_17_1_cast_fu_746_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        t_address1 = sum_6_i_cast_fu_685_p1;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        t_address1 = sum_4_i_cast_fu_665_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        t_address1 = sum_2_i_cast_fu_645_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        t_address1 = tmp_3_cast_fu_624_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        t_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        t_address1 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        t_address1 = 64'd135;
    end else begin
        t_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        t_ce0 = 1'b1;
    end else begin
        t_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        t_ce1 = 1'b1;
    end else begin
        t_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        t_d0 = tmp_1_fu_598_p2;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        t_d0 = m_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        t_d0 = 8'd0;
    end else begin
        t_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        t_d1 = 8'd6;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        t_d1 = m_q0;
    end else begin
        t_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state13))) begin
        t_we0 = 1'b1;
    end else begin
        t_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14))) begin
        t_we1 = 1'b1;
    end else begin
        t_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_s_fu_592_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((tmp_2_fu_610_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & ((tmp_2_reg_878 == 1'd1) | (tmp_16_1_fu_732_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_3_cast4_fu_605_p1 = i_3_reg_569;

assign i_7_1_fu_762_p2 = (i_3_reg_569 + 5'd2);

assign i_7_cast2_fu_727_p1 = i_7_s_fu_721_p2;

assign i_7_s_fu_721_p2 = (i_3_reg_569 | 5'd1);

assign indvarinc_fu_581_p2 = (invdar_reg_558 + 8'd1);

assign r_1_7_i1_fu_828_p9 = {{{{{{{{t_q0}, {t_q1}}, {t_load_14_reg_1047}}, {t_load_13_reg_1042}}, {t_load_12_reg_1027}}, {t_load_11_reg_1022}}, {t_load_10_reg_1007}}, {t_load_9_reg_1002}};

assign r_1_7_i_fu_700_p9 = {{{{{{{{t_q0}, {t_q1}}, {t_load_6_reg_953}}, {t_load_5_reg_948}}, {t_load_4_reg_933}}, {t_load_3_reg_928}}, {t_load_2_reg_913}}, {t_load_1_reg_908}};

assign s_d1 = 64'd0;

assign sum_1_i1_cast_fu_757_p1 = sum_1_i1_fu_751_p2;

assign sum_1_i1_fu_751_p2 = (tmp_17_1_fu_738_p3 | 8'd1);

assign sum_1_i_cast_fu_635_p1 = sum_1_i_fu_629_p2;

assign sum_1_i_fu_629_p2 = (tmp_3_fu_616_p3 | 8'd1);

assign sum_2_i1_cast_fu_773_p1 = sum_2_i1_fu_768_p2;

assign sum_2_i1_fu_768_p2 = (tmp_17_1_reg_971 | 8'd2);

assign sum_2_i_cast_fu_645_p1 = sum_2_i_fu_640_p2;

assign sum_2_i_fu_640_p2 = (tmp_3_reg_882 | 8'd2);

assign sum_3_i1_cast_fu_783_p1 = sum_3_i1_fu_778_p2;

assign sum_3_i1_fu_778_p2 = (tmp_17_1_reg_971 | 8'd3);

assign sum_3_i_cast_fu_655_p1 = sum_3_i_fu_650_p2;

assign sum_3_i_fu_650_p2 = (tmp_3_reg_882 | 8'd3);

assign sum_4_i1_cast_fu_793_p1 = sum_4_i1_fu_788_p2;

assign sum_4_i1_fu_788_p2 = (tmp_17_1_reg_971 | 8'd4);

assign sum_4_i_cast_fu_665_p1 = sum_4_i_fu_660_p2;

assign sum_4_i_fu_660_p2 = (tmp_3_reg_882 | 8'd4);

assign sum_5_i1_cast_fu_803_p1 = sum_5_i1_fu_798_p2;

assign sum_5_i1_fu_798_p2 = (tmp_17_1_reg_971 | 8'd5);

assign sum_5_i_cast_fu_675_p1 = sum_5_i_fu_670_p2;

assign sum_5_i_fu_670_p2 = (tmp_3_reg_882 | 8'd5);

assign sum_6_i1_cast_fu_813_p1 = sum_6_i1_fu_808_p2;

assign sum_6_i1_fu_808_p2 = (tmp_17_1_reg_971 | 8'd6);

assign sum_6_i_cast_fu_685_p1 = sum_6_i_fu_680_p2;

assign sum_6_i_fu_680_p2 = (tmp_3_reg_882 | 8'd6);

assign sum_7_i1_cast_fu_823_p1 = sum_7_i1_fu_818_p2;

assign sum_7_i1_fu_818_p2 = (tmp_17_1_reg_971 | 8'd7);

assign sum_7_i_cast_fu_695_p1 = sum_7_i_fu_690_p2;

assign sum_7_i_fu_690_p2 = (tmp_3_reg_882 | 8'd7);

assign tmp_16_1_fu_732_p2 = ((i_7_s_fu_721_p2 == 5'd17) ? 1'b1 : 1'b0);

assign tmp_17_1_cast_fu_746_p1 = tmp_17_1_fu_738_p3;

assign tmp_17_1_fu_738_p3 = {{i_7_s_fu_721_p2}, {3'd0}};

assign tmp_19_1_fu_842_p2 = (s_q1 ^ r_1_7_i1_fu_828_p9);

assign tmp_1_fu_598_p2 = (t_q1 | 8'd128);

assign tmp_2_fu_610_p2 = ((i_3_reg_569 == 5'd17) ? 1'b1 : 1'b0);

assign tmp_3_cast_fu_624_p1 = tmp_3_fu_616_p3;

assign tmp_3_fu_616_p3 = {{i_3_reg_569}, {3'd0}};

assign tmp_4_fu_714_p2 = (s_q1 ^ r_1_7_i_fu_700_p9);

assign tmp_fu_587_p1 = invdar_reg_558;

assign tmp_s_fu_592_p2 = ((invdar_reg_558 == 8'd199) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_3_reg_882[2:0] <= 3'b000;
    tmp_17_1_reg_971[3:0] <= 4'b1000;
    s_addr_26_reg_991[0] <= 1'b1;
end

endmodule //keccak_absorb
