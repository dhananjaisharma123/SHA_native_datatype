-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keccak_absorb is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_we0 : OUT STD_LOGIC;
    s_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    s_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    s_ce1 : OUT STD_LOGIC;
    s_we1 : OUT STD_LOGIC;
    s_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    s_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    m_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    m_ce0 : OUT STD_LOGIC;
    m_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    m_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    m_ce1 : OUT STD_LOGIC;
    m_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    mlen : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of keccak_absorb is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv64_87 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010000111";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_C7 : STD_LOGIC_VECTOR (7 downto 0) := "11000111";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_87 : STD_LOGIC_VECTOR (7 downto 0) := "10000111";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv64_FFFFFFFFFFFFFF78 : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111101111000";
    constant ap_const_lv64_88 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010001000";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv14_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_const_lv14_3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000011";
    constant ap_const_lv14_4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_const_lv14_5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000101";
    constant ap_const_lv14_6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000110";
    constant ap_const_lv14_7 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvarinc_fu_412_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_4_fu_440_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ff_fu_446_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_449_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_13_reg_794 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_6_fu_470_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_6_reg_806 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sum7_fu_488_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum7_reg_811 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_8_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_1_reg_831 : STD_LOGIC_VECTOR (4 downto 0);
    signal mlen_assign_fu_509_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mlen_assign_reg_836 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_rec_fu_515_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_rec_reg_841 : STD_LOGIC_VECTOR (63 downto 0);
    signal ff_1_fu_521_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ff_1_reg_846 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_load_1_reg_851 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal m_load_2_reg_856 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_load_3_reg_871 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal m_load_4_reg_876 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_load_5_reg_891 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal m_load_6_reg_896 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_cast_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast_reg_911 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_3_fu_622_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_919 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_addr_2_reg_929 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_7_fu_656_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_7_reg_937 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_10_fu_662_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_942 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_addr_2_reg_962 : STD_LOGIC_VECTOR (4 downto 0);
    signal t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_load_1_reg_967 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal t_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_load_2_reg_972 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_load_3_reg_987 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal t_load_4_reg_992 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_load_5_reg_1007 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal t_load_6_reg_1012 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_ce0 : STD_LOGIC;
    signal t_we0 : STD_LOGIC;
    signal t_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_404_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_404_ap_done : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_404_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_404_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_404_state_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_404_state_ce0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_404_state_we0 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_404_state_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_fu_404_state_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeccakF1600_StatePer_fu_404_state_ce1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_404_state_we1 : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_fu_404_state_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal invdar_reg_316 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_327 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_5_reg_338 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_0_rec_reg_349 : STD_LOGIC_VECTOR (63 downto 0);
    signal ff1_reg_361 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_reg_371 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_2_reg_382 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_3_reg_393 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_KeccakF1600_StatePer_fu_404_ap_start_reg : STD_LOGIC := '0';
    signal tmp_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast6_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum7_cast_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_i_cast_fu_504_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast5_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_2_i_cast_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_3_i_cast_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_4_i_cast_fu_552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_5_i_cast_fu_562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_6_i_cast_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_7_i_cast_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum9_cast_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_cast_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_i1_cast_fu_681_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast2_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_2_i1_cast_fu_691_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_3_i1_cast_fu_701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_4_i1_cast_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_5_i1_cast_fu_721_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_6_i1_cast_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_7_i1_cast_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_638_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_601_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_760_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_476_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_cast_fu_484_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum_1_i_fu_498_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum_2_i_fu_527_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum_3_i_fu_537_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum_4_i_fu_547_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum_5_i_fu_557_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum_6_i_fu_567_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum_7_i_fu_577_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_1_7_i_fu_587_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast3_fu_608_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum9_fu_628_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum_1_i1_fu_675_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_2_i1_fu_686_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_i1_fu_696_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_4_i1_fu_706_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_5_i1_fu_716_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_6_i1_fu_726_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_7_i1_fu_736_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_1_7_i1_fu_746_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component KeccakF1600_StatePer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        state_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        state_ce1 : OUT STD_LOGIC;
        state_we1 : OUT STD_LOGIC;
        state_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        state_q1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component keccak_absorb_t IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    t_U : component keccak_absorb_t
    generic map (
        DataWidth => 8,
        AddressRange => 200,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => t_address0,
        ce0 => t_ce0,
        we0 => t_we0,
        d0 => t_d0,
        q0 => t_q0,
        address1 => t_address1,
        ce1 => t_ce1,
        q1 => t_q1);

    grp_KeccakF1600_StatePer_fu_404 : component KeccakF1600_StatePer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_fu_404_ap_start,
        ap_done => grp_KeccakF1600_StatePer_fu_404_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_fu_404_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_fu_404_ap_ready,
        state_address0 => grp_KeccakF1600_StatePer_fu_404_state_address0,
        state_ce0 => grp_KeccakF1600_StatePer_fu_404_state_ce0,
        state_we0 => grp_KeccakF1600_StatePer_fu_404_state_we0,
        state_d0 => grp_KeccakF1600_StatePer_fu_404_state_d0,
        state_q0 => s_q0,
        state_address1 => grp_KeccakF1600_StatePer_fu_404_state_address1,
        state_ce1 => grp_KeccakF1600_StatePer_fu_404_state_ce1,
        state_we1 => grp_KeccakF1600_StatePer_fu_404_state_we1,
        state_d1 => grp_KeccakF1600_StatePer_fu_404_state_d1,
        state_q1 => s_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_fu_404_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_fu_404_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_8_fu_464_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_KeccakF1600_StatePer_fu_404_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_fu_404_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_fu_404_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ff1_reg_361_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_434_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ff1_reg_361 <= ff_fu_446_p1;
            elsif (((grp_KeccakF1600_StatePer_fu_404_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                ff1_reg_361 <= ff_1_reg_846;
            end if; 
        end if;
    end process;

    i_1_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_1_reg_371 <= i_6_reg_806;
            elsif (((tmp_7_fu_453_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_reg_371 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_2_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_7_fu_453_p2 = ap_const_lv1_0))) then 
                i_2_reg_382 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_2_reg_382 <= tmp_3_reg_919;
            end if; 
        end if;
    end process;

    i_3_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                i_3_reg_393 <= i_7_reg_937;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_3_reg_393 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_5_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_434_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_5_reg_338 <= mlen;
            elsif (((grp_KeccakF1600_StatePer_fu_404_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                i_5_reg_338 <= mlen_assign_reg_836;
            end if; 
        end if;
    end process;

    i_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_s_fu_423_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_327 <= ap_const_lv5_0;
            elsif (((tmp_6_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_327 <= i_4_fu_440_p2;
            end if; 
        end if;
    end process;

    invdar_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_s_fu_423_p2 = ap_const_lv1_0))) then 
                invdar_reg_316 <= indvarinc_fu_412_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                invdar_reg_316 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_0_rec_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_434_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_0_rec_reg_349 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_fu_404_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                p_0_rec_reg_349 <= p_rec_reg_841;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_464_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                ff_1_reg_846 <= ff_1_fu_521_p2;
                mlen_assign_reg_836 <= mlen_assign_fu_509_p2;
                p_rec_reg_841 <= p_rec_fu_515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                    i_2_cast_reg_911(7 downto 0) <= i_2_cast_fu_612_p1(7 downto 0);
                tmp_3_reg_919 <= tmp_3_fu_622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                i_6_reg_806 <= i_6_fu_470_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_7_reg_937 <= i_7_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                m_load_1_reg_851 <= m_q0;
                m_load_2_reg_856 <= m_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                m_load_3_reg_871 <= m_q0;
                m_load_4_reg_876 <= m_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                m_load_5_reg_891 <= m_q0;
                m_load_6_reg_896 <= m_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_8_fu_464_p2 = ap_const_lv1_0))) then
                s_addr_1_reg_831 <= i_1_cast5_fu_459_p1(5 - 1 downto 0);
                sum7_reg_811 <= sum7_fu_488_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (tmp_4_fu_650_p2 = ap_const_lv1_0))) then
                s_addr_2_reg_962 <= i_3_cast2_fu_645_p1(5 - 1 downto 0);
                    tmp_10_reg_942(7 downto 3) <= tmp_10_fu_662_p3(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                t_load_1_reg_967 <= t_q0;
                t_load_2_reg_972 <= t_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                t_load_3_reg_987 <= t_q1;
                t_load_4_reg_992 <= t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                t_load_5_reg_1007 <= t_q1;
                t_load_6_reg_1012 <= t_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_13_reg_794 <= tmp_13_fu_449_p1;
            end if;
        end if;
    end process;
    i_2_cast_reg_911(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    tmp_10_reg_942(2 downto 0) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_6_fu_434_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_8_fu_464_p2, ap_CS_fsm_state11, exitcond_fu_616_p2, ap_CS_fsm_state15, tmp_4_fu_650_p2, grp_KeccakF1600_StatePer_fu_404_ap_done, tmp_s_fu_423_p2, ap_CS_fsm_state10, tmp_7_fu_453_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_s_fu_423_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_6_fu_434_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (tmp_7_fu_453_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((tmp_8_fu_464_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state10 => 
                if (((grp_KeccakF1600_StatePer_fu_404_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if (((exitcond_fu_616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((tmp_4_fu_650_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state15, tmp_4_fu_650_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((tmp_4_fu_650_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15, tmp_4_fu_650_p2)
    begin
        if (((tmp_4_fu_650_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_616_p2 <= "1" when (i_2_cast_fu_612_p1 = i_5_reg_338) else "0";
    ff_1_fu_521_p2 <= std_logic_vector(unsigned(ff1_reg_361) + unsigned(ap_const_lv8_78));
    ff_fu_446_p1 <= mlen(8 - 1 downto 0);
    grp_KeccakF1600_StatePer_fu_404_ap_start <= grp_KeccakF1600_StatePer_fu_404_ap_start_reg;
    i_1_cast5_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_371),64));
    i_2_cast3_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_382),14));
    i_2_cast_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_382),64));
    i_3_cast2_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_393),64));
    i_4_fu_440_p2 <= std_logic_vector(unsigned(i_reg_327) + unsigned(ap_const_lv5_1));
    i_6_fu_470_p2 <= std_logic_vector(unsigned(i_1_reg_371) + unsigned(ap_const_lv5_1));
    i_7_fu_656_p2 <= std_logic_vector(unsigned(i_3_reg_393) + unsigned(ap_const_lv5_1));
    i_cast6_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_327),64));
    indvarinc_fu_412_p2 <= std_logic_vector(unsigned(invdar_reg_316) + unsigned(ap_const_lv8_1));

    m_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11, sum7_cast_fu_493_p1, sum_2_i_cast_fu_532_p1, sum_4_i_cast_fu_552_p1, sum_6_i_cast_fu_572_p1, sum9_cast_fu_633_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            m_address0 <= sum9_cast_fu_633_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            m_address0 <= sum_6_i_cast_fu_572_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            m_address0 <= sum_4_i_cast_fu_552_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_address0 <= sum_2_i_cast_fu_532_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            m_address0 <= sum7_cast_fu_493_p1(12 - 1 downto 0);
        else 
            m_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    m_address1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, sum_1_i_cast_fu_504_p1, sum_3_i_cast_fu_542_p1, sum_5_i_cast_fu_562_p1, sum_7_i_cast_fu_582_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            m_address1 <= sum_7_i_cast_fu_582_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            m_address1 <= sum_5_i_cast_fu_562_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            m_address1 <= sum_3_i_cast_fu_542_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            m_address1 <= sum_1_i_cast_fu_504_p1(12 - 1 downto 0);
        else 
            m_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    m_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_ce0 <= ap_const_logic_1;
        else 
            m_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    m_ce1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            m_ce1 <= ap_const_logic_1;
        else 
            m_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mlen_assign_fu_509_p2 <= std_logic_vector(unsigned(i_5_reg_338) + unsigned(ap_const_lv64_FFFFFFFFFFFFFF78));
    p_rec_fu_515_p2 <= std_logic_vector(unsigned(p_0_rec_reg_349) + unsigned(ap_const_lv64_88));
    r_1_7_i1_fu_746_p9 <= (((((((t_q0 & t_q1) & t_load_6_reg_1012) & t_load_5_reg_1007) & t_load_4_reg_992) & t_load_3_reg_987) & t_load_2_reg_972) & t_load_1_reg_967);
    r_1_7_i_fu_587_p9 <= (((((((m_q1 & m_q0) & m_load_6_reg_896) & m_load_5_reg_891) & m_load_4_reg_876) & m_load_3_reg_871) & m_load_2_reg_856) & m_load_1_reg_851);

    s_address0_assign_proc : process(ap_CS_fsm_state3, s_addr_1_reg_831, ap_CS_fsm_state8, s_addr_2_reg_962, ap_CS_fsm_state18, grp_KeccakF1600_StatePer_fu_404_state_address0, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state19, i_cast6_fu_429_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            s_address0 <= s_addr_2_reg_962;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            s_address0 <= s_addr_1_reg_831;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_address0 <= i_cast6_fu_429_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            s_address0 <= grp_KeccakF1600_StatePer_fu_404_state_address0;
        else 
            s_address0 <= "XXXXX";
        end if; 
    end process;

    s_address1 <= grp_KeccakF1600_StatePer_fu_404_state_address1;

    s_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state8, ap_CS_fsm_state18, grp_KeccakF1600_StatePer_fu_404_state_ce0, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            s_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            s_ce0 <= grp_KeccakF1600_StatePer_fu_404_state_ce0;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    s_ce1_assign_proc : process(grp_KeccakF1600_StatePer_fu_404_state_ce1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            s_ce1 <= grp_KeccakF1600_StatePer_fu_404_state_ce1;
        else 
            s_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    s_d0_assign_proc : process(ap_CS_fsm_state3, grp_KeccakF1600_StatePer_fu_404_state_d0, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state19, tmp_5_fu_601_p2, tmp_11_fu_760_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            s_d0 <= tmp_11_fu_760_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            s_d0 <= tmp_5_fu_601_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            s_d0 <= ap_const_lv64_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            s_d0 <= grp_KeccakF1600_StatePer_fu_404_state_d0;
        else 
            s_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    s_d1 <= grp_KeccakF1600_StatePer_fu_404_state_d1;

    s_we0_assign_proc : process(ap_CS_fsm_state3, tmp_6_fu_434_p2, grp_KeccakF1600_StatePer_fu_404_state_we0, ap_CS_fsm_state10, ap_CS_fsm_state9, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((tmp_6_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            s_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            s_we0 <= grp_KeccakF1600_StatePer_fu_404_state_we0;
        else 
            s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    s_we1_assign_proc : process(grp_KeccakF1600_StatePer_fu_404_state_we1, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            s_we1 <= grp_KeccakF1600_StatePer_fu_404_state_we1;
        else 
            s_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sum7_cast_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum7_fu_488_p2),64));
    sum7_fu_488_p2 <= std_logic_vector(unsigned(tmp_13_reg_794) + unsigned(tmp_9_cast_fu_484_p1));
    sum9_cast_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum9_fu_628_p2),64));
    sum9_fu_628_p2 <= std_logic_vector(unsigned(i_2_cast3_fu_608_p1) + unsigned(tmp_13_reg_794));
    sum_1_i1_cast_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_1_i1_fu_675_p2),64));
    sum_1_i1_fu_675_p2 <= (tmp_10_fu_662_p3 or ap_const_lv8_1);
    sum_1_i_cast_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_1_i_fu_498_p2),64));
    sum_1_i_fu_498_p2 <= (sum7_fu_488_p2 or ap_const_lv14_1);
    sum_2_i1_cast_fu_691_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_2_i1_fu_686_p2),64));
    sum_2_i1_fu_686_p2 <= (tmp_10_reg_942 or ap_const_lv8_2);
    sum_2_i_cast_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_2_i_fu_527_p2),64));
    sum_2_i_fu_527_p2 <= (sum7_reg_811 or ap_const_lv14_2);
    sum_3_i1_cast_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_3_i1_fu_696_p2),64));
    sum_3_i1_fu_696_p2 <= (tmp_10_reg_942 or ap_const_lv8_3);
    sum_3_i_cast_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_3_i_fu_537_p2),64));
    sum_3_i_fu_537_p2 <= (sum7_reg_811 or ap_const_lv14_3);
    sum_4_i1_cast_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_4_i1_fu_706_p2),64));
    sum_4_i1_fu_706_p2 <= (tmp_10_reg_942 or ap_const_lv8_4);
    sum_4_i_cast_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_4_i_fu_547_p2),64));
    sum_4_i_fu_547_p2 <= (sum7_reg_811 or ap_const_lv14_4);
    sum_5_i1_cast_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_5_i1_fu_716_p2),64));
    sum_5_i1_fu_716_p2 <= (tmp_10_reg_942 or ap_const_lv8_5);
    sum_5_i_cast_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_5_i_fu_557_p2),64));
    sum_5_i_fu_557_p2 <= (sum7_reg_811 or ap_const_lv14_5);
    sum_6_i1_cast_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_6_i1_fu_726_p2),64));
    sum_6_i1_fu_726_p2 <= (tmp_10_reg_942 or ap_const_lv8_6);
    sum_6_i_cast_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_6_i_fu_567_p2),64));
    sum_6_i_fu_567_p2 <= (sum7_reg_811 or ap_const_lv14_6);
    sum_7_i1_cast_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_7_i1_fu_736_p2),64));
    sum_7_i1_fu_736_p2 <= (tmp_10_reg_942 or ap_const_lv8_7);
    sum_7_i_cast_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_7_i_fu_577_p2),64));
    sum_7_i_fu_577_p2 <= (sum7_reg_811 or ap_const_lv14_7);
    t_addr_2_reg_929 <= ap_const_lv64_87(8 - 1 downto 0);

    t_address0_assign_proc : process(ap_CS_fsm_state2, i_2_cast_reg_911, ap_CS_fsm_state11, t_addr_2_reg_929, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, i_5_reg_338, ap_CS_fsm_state12, ap_CS_fsm_state14, tmp_fu_418_p1, tmp_10_cast_fu_670_p1, sum_3_i1_cast_fu_701_p1, sum_5_i1_cast_fu_721_p1, sum_7_i1_cast_fu_741_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            t_address0 <= sum_7_i1_cast_fu_741_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            t_address0 <= sum_5_i1_cast_fu_721_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_address0 <= sum_3_i1_cast_fu_701_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            t_address0 <= tmp_10_cast_fu_670_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            t_address0 <= t_addr_2_reg_929;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            t_address0 <= ap_const_lv64_87(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_address0 <= i_2_cast_reg_911(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            t_address0 <= i_5_reg_338(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_address0 <= tmp_fu_418_p1(8 - 1 downto 0);
        else 
            t_address0 <= "XXXXXXXX";
        end if; 
    end process;


    t_address1_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, sum_1_i1_cast_fu_681_p1, sum_2_i1_cast_fu_691_p1, sum_4_i1_cast_fu_711_p1, sum_6_i1_cast_fu_731_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            t_address1 <= sum_6_i1_cast_fu_731_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            t_address1 <= sum_4_i1_cast_fu_711_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            t_address1 <= sum_2_i1_cast_fu_691_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            t_address1 <= sum_1_i1_cast_fu_681_p1(8 - 1 downto 0);
        else 
            t_address1 <= "XXXXXXXX";
        end if; 
    end process;


    t_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            t_ce0 <= ap_const_logic_1;
        else 
            t_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    t_ce1_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            t_ce1 <= ap_const_logic_1;
        else 
            t_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    t_d0_assign_proc : process(m_q0, ap_CS_fsm_state2, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state14, tmp_2_fu_638_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            t_d0 <= tmp_2_fu_638_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            t_d0 <= m_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            t_d0 <= ap_const_lv8_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            t_d0 <= ap_const_lv8_0;
        else 
            t_d0 <= "XXXXXXXX";
        end if; 
    end process;


    t_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state11, exitcond_fu_616_p2, ap_CS_fsm_state12, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((exitcond_fu_616_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            t_we0 <= ap_const_logic_1;
        else 
            t_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_cast_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_662_p3),64));
    tmp_10_fu_662_p3 <= (i_3_reg_393 & ap_const_lv3_0);
    tmp_11_fu_760_p2 <= (s_q0 xor r_1_7_i1_fu_746_p9);
    tmp_13_fu_449_p1 <= p_0_rec_reg_349(14 - 1 downto 0);
    tmp_2_fu_638_p2 <= (t_q0 or ap_const_lv8_80);
    tmp_3_fu_622_p2 <= std_logic_vector(unsigned(i_2_reg_382) + unsigned(ap_const_lv8_1));
    tmp_4_fu_650_p2 <= "1" when (i_3_reg_393 = ap_const_lv5_11) else "0";
    tmp_5_fu_601_p2 <= (s_q0 xor r_1_7_i_fu_587_p9);
    tmp_6_fu_434_p2 <= "1" when (i_reg_327 = ap_const_lv5_19) else "0";
    tmp_7_fu_453_p2 <= "1" when (unsigned(ff1_reg_361) > unsigned(ap_const_lv8_87)) else "0";
    tmp_8_fu_464_p2 <= "1" when (i_1_reg_371 = ap_const_lv5_11) else "0";
    tmp_9_cast_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_476_p3),14));
    tmp_9_fu_476_p3 <= (i_1_reg_371 & ap_const_lv3_0);
    tmp_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_316),64));
    tmp_s_fu_423_p2 <= "1" when (invdar_reg_316 = ap_const_lv8_C7) else "0";
end behav;
