// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _store64_HH_
#define _store64_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct store64 : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > x_address0;
    sc_out< sc_logic > x_ce0;
    sc_out< sc_logic > x_we0;
    sc_out< sc_lv<8> > x_d0;
    sc_out< sc_lv<8> > x_address1;
    sc_out< sc_logic > x_ce1;
    sc_out< sc_logic > x_we1;
    sc_out< sc_lv<8> > x_d1;
    sc_in< sc_lv<9> > x_offset;
    sc_in< sc_lv<64> > u;
    sc_in< sc_logic > ap_ce;


    // Module declarations
    store64(sc_module_name name);
    SC_HAS_PROCESS(store64);

    ~store64();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > tmp_1_fu_162_p1;
    sc_signal< sc_lv<8> > tmp_1_reg_297;
    sc_signal< sc_lv<8> > tmp_4_2_reg_307;
    sc_signal< sc_lv<8> > tmp_4_3_reg_312;
    sc_signal< sc_lv<8> > tmp_4_4_reg_317;
    sc_signal< sc_lv<8> > tmp_4_5_reg_322;
    sc_signal< sc_lv<8> > tmp_4_6_reg_327;
    sc_signal< sc_lv<8> > tmp_4_7_reg_332;
    sc_signal< sc_lv<64> > x_offset_cast1_fu_141_p1;
    sc_signal< sc_lv<64> > sum_1_cast_fu_172_p1;
    sc_signal< sc_lv<64> > sum_2_cast_fu_242_p1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > sum_3_cast_fu_252_p1;
    sc_signal< sc_lv<64> > sum_4_cast_fu_262_p1;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > sum_5_cast_fu_272_p1;
    sc_signal< sc_lv<64> > sum_6_cast_fu_282_p1;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > sum_7_cast_fu_292_p1;
    sc_signal< sc_lv<8> > tmp_fu_146_p1;
    sc_signal< sc_lv<8> > sum_1_fu_166_p2;
    sc_signal< sc_lv<8> > sum_2_fu_237_p2;
    sc_signal< sc_lv<8> > sum_3_fu_247_p2;
    sc_signal< sc_lv<8> > sum_4_fu_257_p2;
    sc_signal< sc_lv<8> > sum_5_fu_267_p2;
    sc_signal< sc_lv<8> > sum_6_fu_277_p2;
    sc_signal< sc_lv<8> > sum_7_fu_287_p2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_27;
    static const sc_lv<32> ap_const_lv32_28;
    static const sc_lv<32> ap_const_lv32_2F;
    static const sc_lv<32> ap_const_lv32_30;
    static const sc_lv<32> ap_const_lv32_37;
    static const sc_lv<32> ap_const_lv32_38;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<8> ap_const_lv8_2;
    static const sc_lv<8> ap_const_lv8_3;
    static const sc_lv<8> ap_const_lv8_4;
    static const sc_lv<8> ap_const_lv8_5;
    static const sc_lv<8> ap_const_lv8_6;
    static const sc_lv<8> ap_const_lv8_7;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_sum_1_cast_fu_172_p1();
    void thread_sum_1_fu_166_p2();
    void thread_sum_2_cast_fu_242_p1();
    void thread_sum_2_fu_237_p2();
    void thread_sum_3_cast_fu_252_p1();
    void thread_sum_3_fu_247_p2();
    void thread_sum_4_cast_fu_262_p1();
    void thread_sum_4_fu_257_p2();
    void thread_sum_5_cast_fu_272_p1();
    void thread_sum_5_fu_267_p2();
    void thread_sum_6_cast_fu_282_p1();
    void thread_sum_6_fu_277_p2();
    void thread_sum_7_cast_fu_292_p1();
    void thread_sum_7_fu_287_p2();
    void thread_tmp_1_fu_162_p1();
    void thread_tmp_fu_146_p1();
    void thread_x_address0();
    void thread_x_address1();
    void thread_x_ce0();
    void thread_x_ce1();
    void thread_x_d0();
    void thread_x_d1();
    void thread_x_offset_cast1_fu_141_p1();
    void thread_x_we0();
    void thread_x_we1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
