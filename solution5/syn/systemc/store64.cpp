// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "store64.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic store64::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic store64::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> store64::ap_ST_fsm_state1 = "1";
const sc_lv<4> store64::ap_ST_fsm_state2 = "10";
const sc_lv<4> store64::ap_ST_fsm_state3 = "100";
const sc_lv<4> store64::ap_ST_fsm_state4 = "1000";
const sc_lv<32> store64::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> store64::ap_const_lv32_1 = "1";
const sc_lv<32> store64::ap_const_lv32_2 = "10";
const sc_lv<32> store64::ap_const_lv32_3 = "11";
const sc_lv<32> store64::ap_const_lv32_8 = "1000";
const sc_lv<32> store64::ap_const_lv32_F = "1111";
const sc_lv<8> store64::ap_const_lv8_1 = "1";
const sc_lv<32> store64::ap_const_lv32_10 = "10000";
const sc_lv<32> store64::ap_const_lv32_17 = "10111";
const sc_lv<32> store64::ap_const_lv32_18 = "11000";
const sc_lv<32> store64::ap_const_lv32_1F = "11111";
const sc_lv<32> store64::ap_const_lv32_20 = "100000";
const sc_lv<32> store64::ap_const_lv32_27 = "100111";
const sc_lv<32> store64::ap_const_lv32_28 = "101000";
const sc_lv<32> store64::ap_const_lv32_2F = "101111";
const sc_lv<32> store64::ap_const_lv32_30 = "110000";
const sc_lv<32> store64::ap_const_lv32_37 = "110111";
const sc_lv<32> store64::ap_const_lv32_38 = "111000";
const sc_lv<32> store64::ap_const_lv32_3F = "111111";
const sc_lv<8> store64::ap_const_lv8_2 = "10";
const sc_lv<8> store64::ap_const_lv8_3 = "11";
const sc_lv<8> store64::ap_const_lv8_4 = "100";
const sc_lv<8> store64::ap_const_lv8_5 = "101";
const sc_lv<8> store64::ap_const_lv8_6 = "110";
const sc_lv<8> store64::ap_const_lv8_7 = "111";
const bool store64::ap_const_boolean_1 = true;

store64::store64(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_sum_1_cast_fu_172_p1);
    sensitive << ( sum_1_fu_166_p2 );

    SC_METHOD(thread_sum_1_fu_166_p2);
    sensitive << ( tmp_1_fu_162_p1 );

    SC_METHOD(thread_sum_2_cast_fu_242_p1);
    sensitive << ( sum_2_fu_237_p2 );

    SC_METHOD(thread_sum_2_fu_237_p2);
    sensitive << ( tmp_1_reg_297 );

    SC_METHOD(thread_sum_3_cast_fu_252_p1);
    sensitive << ( sum_3_fu_247_p2 );

    SC_METHOD(thread_sum_3_fu_247_p2);
    sensitive << ( tmp_1_reg_297 );

    SC_METHOD(thread_sum_4_cast_fu_262_p1);
    sensitive << ( sum_4_fu_257_p2 );

    SC_METHOD(thread_sum_4_fu_257_p2);
    sensitive << ( tmp_1_reg_297 );

    SC_METHOD(thread_sum_5_cast_fu_272_p1);
    sensitive << ( sum_5_fu_267_p2 );

    SC_METHOD(thread_sum_5_fu_267_p2);
    sensitive << ( tmp_1_reg_297 );

    SC_METHOD(thread_sum_6_cast_fu_282_p1);
    sensitive << ( sum_6_fu_277_p2 );

    SC_METHOD(thread_sum_6_fu_277_p2);
    sensitive << ( tmp_1_reg_297 );

    SC_METHOD(thread_sum_7_cast_fu_292_p1);
    sensitive << ( sum_7_fu_287_p2 );

    SC_METHOD(thread_sum_7_fu_287_p2);
    sensitive << ( tmp_1_reg_297 );

    SC_METHOD(thread_tmp_1_fu_162_p1);
    sensitive << ( x_offset );

    SC_METHOD(thread_tmp_fu_146_p1);
    sensitive << ( u );

    SC_METHOD(thread_x_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_offset_cast1_fu_141_p1 );
    sensitive << ( sum_2_cast_fu_242_p1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( sum_4_cast_fu_262_p1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( sum_6_cast_fu_282_p1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_x_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( sum_1_cast_fu_172_p1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( sum_3_cast_fu_252_p1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( sum_5_cast_fu_272_p1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( sum_7_cast_fu_292_p1 );

    SC_METHOD(thread_x_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_x_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_x_d0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_4_2_reg_307 );
    sensitive << ( tmp_4_4_reg_317 );
    sensitive << ( tmp_4_6_reg_327 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_fu_146_p1 );

    SC_METHOD(thread_x_d1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( u );
    sensitive << ( tmp_4_3_reg_312 );
    sensitive << ( tmp_4_5_reg_322 );
    sensitive << ( tmp_4_7_reg_332 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_x_offset_cast1_fu_141_p1);
    sensitive << ( x_offset );

    SC_METHOD(thread_x_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_x_we1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_ce );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "store64_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x_address0, "(port)x_address0");
    sc_trace(mVcdFile, x_ce0, "(port)x_ce0");
    sc_trace(mVcdFile, x_we0, "(port)x_we0");
    sc_trace(mVcdFile, x_d0, "(port)x_d0");
    sc_trace(mVcdFile, x_address1, "(port)x_address1");
    sc_trace(mVcdFile, x_ce1, "(port)x_ce1");
    sc_trace(mVcdFile, x_we1, "(port)x_we1");
    sc_trace(mVcdFile, x_d1, "(port)x_d1");
    sc_trace(mVcdFile, x_offset, "(port)x_offset");
    sc_trace(mVcdFile, u, "(port)u");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_1_fu_162_p1, "tmp_1_fu_162_p1");
    sc_trace(mVcdFile, tmp_1_reg_297, "tmp_1_reg_297");
    sc_trace(mVcdFile, tmp_4_2_reg_307, "tmp_4_2_reg_307");
    sc_trace(mVcdFile, tmp_4_3_reg_312, "tmp_4_3_reg_312");
    sc_trace(mVcdFile, tmp_4_4_reg_317, "tmp_4_4_reg_317");
    sc_trace(mVcdFile, tmp_4_5_reg_322, "tmp_4_5_reg_322");
    sc_trace(mVcdFile, tmp_4_6_reg_327, "tmp_4_6_reg_327");
    sc_trace(mVcdFile, tmp_4_7_reg_332, "tmp_4_7_reg_332");
    sc_trace(mVcdFile, x_offset_cast1_fu_141_p1, "x_offset_cast1_fu_141_p1");
    sc_trace(mVcdFile, sum_1_cast_fu_172_p1, "sum_1_cast_fu_172_p1");
    sc_trace(mVcdFile, sum_2_cast_fu_242_p1, "sum_2_cast_fu_242_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, sum_3_cast_fu_252_p1, "sum_3_cast_fu_252_p1");
    sc_trace(mVcdFile, sum_4_cast_fu_262_p1, "sum_4_cast_fu_262_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, sum_5_cast_fu_272_p1, "sum_5_cast_fu_272_p1");
    sc_trace(mVcdFile, sum_6_cast_fu_282_p1, "sum_6_cast_fu_282_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, sum_7_cast_fu_292_p1, "sum_7_cast_fu_292_p1");
    sc_trace(mVcdFile, tmp_fu_146_p1, "tmp_fu_146_p1");
    sc_trace(mVcdFile, sum_1_fu_166_p2, "sum_1_fu_166_p2");
    sc_trace(mVcdFile, sum_2_fu_237_p2, "sum_2_fu_237_p2");
    sc_trace(mVcdFile, sum_3_fu_247_p2, "sum_3_fu_247_p2");
    sc_trace(mVcdFile, sum_4_fu_257_p2, "sum_4_fu_257_p2");
    sc_trace(mVcdFile, sum_5_fu_267_p2, "sum_5_fu_267_p2");
    sc_trace(mVcdFile, sum_6_fu_277_p2, "sum_6_fu_277_p2");
    sc_trace(mVcdFile, sum_7_fu_287_p2, "sum_7_fu_287_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

store64::~store64() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void store64::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        tmp_1_reg_297 = tmp_1_fu_162_p1.read();
        tmp_4_2_reg_307 = u.read().range(23, 16);
        tmp_4_3_reg_312 = u.read().range(31, 24);
        tmp_4_4_reg_317 = u.read().range(39, 32);
        tmp_4_5_reg_322 = u.read().range(47, 40);
        tmp_4_6_reg_327 = u.read().range(55, 48);
        tmp_4_7_reg_332 = u.read().range(63, 56);
    }
}

void store64::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void store64::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void store64::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void store64::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void store64::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void store64::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void store64::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void store64::thread_sum_1_cast_fu_172_p1() {
    sum_1_cast_fu_172_p1 = esl_zext<64,8>(sum_1_fu_166_p2.read());
}

void store64::thread_sum_1_fu_166_p2() {
    sum_1_fu_166_p2 = (!ap_const_lv8_1.is_01() || !tmp_1_fu_162_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_1) + sc_biguint<8>(tmp_1_fu_162_p1.read()));
}

void store64::thread_sum_2_cast_fu_242_p1() {
    sum_2_cast_fu_242_p1 = esl_zext<64,8>(sum_2_fu_237_p2.read());
}

void store64::thread_sum_2_fu_237_p2() {
    sum_2_fu_237_p2 = (!ap_const_lv8_2.is_01() || !tmp_1_reg_297.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_2) + sc_biguint<8>(tmp_1_reg_297.read()));
}

void store64::thread_sum_3_cast_fu_252_p1() {
    sum_3_cast_fu_252_p1 = esl_zext<64,8>(sum_3_fu_247_p2.read());
}

void store64::thread_sum_3_fu_247_p2() {
    sum_3_fu_247_p2 = (!ap_const_lv8_3.is_01() || !tmp_1_reg_297.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_3) + sc_biguint<8>(tmp_1_reg_297.read()));
}

void store64::thread_sum_4_cast_fu_262_p1() {
    sum_4_cast_fu_262_p1 = esl_zext<64,8>(sum_4_fu_257_p2.read());
}

void store64::thread_sum_4_fu_257_p2() {
    sum_4_fu_257_p2 = (!ap_const_lv8_4.is_01() || !tmp_1_reg_297.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_4) + sc_biguint<8>(tmp_1_reg_297.read()));
}

void store64::thread_sum_5_cast_fu_272_p1() {
    sum_5_cast_fu_272_p1 = esl_zext<64,8>(sum_5_fu_267_p2.read());
}

void store64::thread_sum_5_fu_267_p2() {
    sum_5_fu_267_p2 = (!ap_const_lv8_5.is_01() || !tmp_1_reg_297.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_5) + sc_biguint<8>(tmp_1_reg_297.read()));
}

void store64::thread_sum_6_cast_fu_282_p1() {
    sum_6_cast_fu_282_p1 = esl_zext<64,8>(sum_6_fu_277_p2.read());
}

void store64::thread_sum_6_fu_277_p2() {
    sum_6_fu_277_p2 = (!ap_const_lv8_6.is_01() || !tmp_1_reg_297.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_6) + sc_biguint<8>(tmp_1_reg_297.read()));
}

void store64::thread_sum_7_cast_fu_292_p1() {
    sum_7_cast_fu_292_p1 = esl_zext<64,8>(sum_7_fu_287_p2.read());
}

void store64::thread_sum_7_fu_287_p2() {
    sum_7_fu_287_p2 = (!ap_const_lv8_7.is_01() || !tmp_1_reg_297.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_7) + sc_biguint<8>(tmp_1_reg_297.read()));
}

void store64::thread_tmp_1_fu_162_p1() {
    tmp_1_fu_162_p1 = x_offset.read().range(8-1, 0);
}

void store64::thread_tmp_fu_146_p1() {
    tmp_fu_146_p1 = u.read().range(8-1, 0);
}

void store64::thread_x_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        x_address0 =  (sc_lv<8>) (sum_6_cast_fu_282_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x_address0 =  (sc_lv<8>) (sum_4_cast_fu_262_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_address0 =  (sc_lv<8>) (sum_2_cast_fu_242_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        x_address0 =  (sc_lv<8>) (x_offset_cast1_fu_141_p1.read());
    } else {
        x_address0 = "XXXXXXXX";
    }
}

void store64::thread_x_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        x_address1 =  (sc_lv<8>) (sum_7_cast_fu_292_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x_address1 =  (sc_lv<8>) (sum_5_cast_fu_272_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_address1 =  (sc_lv<8>) (sum_3_cast_fu_252_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        x_address1 =  (sc_lv<8>) (sum_1_cast_fu_172_p1.read());
    } else {
        x_address1 = "XXXXXXXX";
    }
}

void store64::thread_x_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())))) {
        x_ce0 = ap_const_logic_1;
    } else {
        x_ce0 = ap_const_logic_0;
    }
}

void store64::thread_x_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())))) {
        x_ce1 = ap_const_logic_1;
    } else {
        x_ce1 = ap_const_logic_0;
    }
}

void store64::thread_x_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        x_d0 = tmp_4_6_reg_327.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x_d0 = tmp_4_4_reg_317.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_d0 = tmp_4_2_reg_307.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        x_d0 = tmp_fu_146_p1.read();
    } else {
        x_d0 = "XXXXXXXX";
    }
}

void store64::thread_x_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        x_d1 = tmp_4_7_reg_332.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        x_d1 = tmp_4_5_reg_322.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        x_d1 = tmp_4_3_reg_312.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        x_d1 = u.read().range(15, 8);
    } else {
        x_d1 = "XXXXXXXX";
    }
}

void store64::thread_x_offset_cast1_fu_141_p1() {
    x_offset_cast1_fu_141_p1 = esl_zext<64,9>(x_offset.read());
}

void store64::thread_x_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())))) {
        x_we0 = ap_const_logic_1;
    } else {
        x_we0 = ap_const_logic_0;
    }
}

void store64::thread_x_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())))) {
        x_we1 = ap_const_logic_1;
    } else {
        x_we1 = ap_const_logic_0;
    }
}

void store64::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<4>) ("XXXX");
            break;
    }
}

}

