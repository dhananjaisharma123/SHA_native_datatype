-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity store64 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    x_ce0 : OUT STD_LOGIC;
    x_we0 : OUT STD_LOGIC;
    x_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    x_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    x_ce1 : OUT STD_LOGIC;
    x_we1 : OUT STD_LOGIC;
    x_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    x_offset : IN STD_LOGIC_VECTOR (8 downto 0);
    u : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of store64 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_5 : STD_LOGIC_VECTOR (7 downto 0) := "00000101";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_7 : STD_LOGIC_VECTOR (7 downto 0) := "00000111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_1_fu_162_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_reg_297 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_2_reg_307 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_3_reg_312 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_4_reg_317 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_5_reg_322 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_6_reg_327 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_7_reg_332 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_offset_cast1_fu_141_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_1_cast_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_2_cast_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sum_3_cast_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_4_cast_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sum_5_cast_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_6_cast_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sum_7_cast_fu_292_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_146_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_1_fu_166_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_2_fu_237_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_3_fu_247_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_4_fu_257_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_5_fu_267_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_6_fu_277_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_7_fu_287_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_1_reg_297 <= tmp_1_fu_162_p1;
                tmp_4_2_reg_307 <= u(23 downto 16);
                tmp_4_3_reg_312 <= u(31 downto 24);
                tmp_4_4_reg_317 <= u(39 downto 32);
                tmp_4_5_reg_322 <= u(47 downto 40);
                tmp_4_6_reg_327 <= u(55 downto 48);
                tmp_4_7_reg_332 <= u(63 downto 56);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_ce, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    sum_1_cast_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_1_fu_166_p2),64));
    sum_1_fu_166_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(tmp_1_fu_162_p1));
    sum_2_cast_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_2_fu_237_p2),64));
    sum_2_fu_237_p2 <= std_logic_vector(unsigned(ap_const_lv8_2) + unsigned(tmp_1_reg_297));
    sum_3_cast_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_3_fu_247_p2),64));
    sum_3_fu_247_p2 <= std_logic_vector(unsigned(ap_const_lv8_3) + unsigned(tmp_1_reg_297));
    sum_4_cast_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_4_fu_257_p2),64));
    sum_4_fu_257_p2 <= std_logic_vector(unsigned(ap_const_lv8_4) + unsigned(tmp_1_reg_297));
    sum_5_cast_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_5_fu_267_p2),64));
    sum_5_fu_267_p2 <= std_logic_vector(unsigned(ap_const_lv8_5) + unsigned(tmp_1_reg_297));
    sum_6_cast_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_6_fu_277_p2),64));
    sum_6_fu_277_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) + unsigned(tmp_1_reg_297));
    sum_7_cast_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_7_fu_287_p2),64));
    sum_7_fu_287_p2 <= std_logic_vector(unsigned(ap_const_lv8_7) + unsigned(tmp_1_reg_297));
    tmp_1_fu_162_p1 <= x_offset(8 - 1 downto 0);
    tmp_fu_146_p1 <= u(8 - 1 downto 0);

    x_address0_assign_proc : process(ap_CS_fsm_state1, x_offset_cast1_fu_141_p1, sum_2_cast_fu_242_p1, ap_CS_fsm_state2, sum_4_cast_fu_262_p1, ap_CS_fsm_state3, sum_6_cast_fu_282_p1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_address0 <= sum_6_cast_fu_282_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_address0 <= sum_4_cast_fu_262_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_address0 <= sum_2_cast_fu_242_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            x_address0 <= x_offset_cast1_fu_141_p1(8 - 1 downto 0);
        else 
            x_address0 <= "XXXXXXXX";
        end if; 
    end process;


    x_address1_assign_proc : process(ap_CS_fsm_state1, sum_1_cast_fu_172_p1, ap_CS_fsm_state2, sum_3_cast_fu_252_p1, ap_CS_fsm_state3, sum_5_cast_fu_272_p1, ap_CS_fsm_state4, sum_7_cast_fu_292_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_address1 <= sum_7_cast_fu_292_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_address1 <= sum_5_cast_fu_272_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_address1 <= sum_3_cast_fu_252_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            x_address1 <= sum_1_cast_fu_172_p1(8 - 1 downto 0);
        else 
            x_address1 <= "XXXXXXXX";
        end if; 
    end process;


    x_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            x_ce0 <= ap_const_logic_1;
        else 
            x_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    x_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            x_ce1 <= ap_const_logic_1;
        else 
            x_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    x_d0_assign_proc : process(ap_CS_fsm_state1, tmp_4_2_reg_307, tmp_4_4_reg_317, tmp_4_6_reg_327, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_fu_146_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_d0 <= tmp_4_6_reg_327;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_d0 <= tmp_4_4_reg_317;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_d0 <= tmp_4_2_reg_307;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            x_d0 <= tmp_fu_146_p1;
        else 
            x_d0 <= "XXXXXXXX";
        end if; 
    end process;


    x_d1_assign_proc : process(ap_CS_fsm_state1, u, tmp_4_3_reg_312, tmp_4_5_reg_322, tmp_4_7_reg_332, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            x_d1 <= tmp_4_7_reg_332;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            x_d1 <= tmp_4_5_reg_322;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            x_d1 <= tmp_4_3_reg_312;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            x_d1 <= u(15 downto 8);
        else 
            x_d1 <= "XXXXXXXX";
        end if; 
    end process;

    x_offset_cast1_fu_141_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_offset),64));

    x_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            x_we0 <= ap_const_logic_1;
        else 
            x_we0 <= ap_const_logic_0;
        end if; 
    end process;


    x_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_ce, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            x_we1 <= ap_const_logic_1;
        else 
            x_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
