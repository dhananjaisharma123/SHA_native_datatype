// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module store64 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_address0,
        x_ce0,
        x_we0,
        x_d0,
        x_address1,
        x_ce1,
        x_we1,
        x_d1,
        x_offset,
        u,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] x_address0;
output   x_ce0;
output   x_we0;
output  [7:0] x_d0;
output  [7:0] x_address1;
output   x_ce1;
output   x_we1;
output  [7:0] x_d1;
input  [8:0] x_offset;
input  [63:0] u;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] x_address0;
reg x_ce0;
reg x_we0;
reg[7:0] x_d0;
reg[7:0] x_address1;
reg x_ce1;
reg x_we1;
reg[7:0] x_d1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] tmp_1_fu_162_p1;
reg   [7:0] tmp_1_reg_297;
reg   [7:0] tmp_4_2_reg_307;
reg   [7:0] tmp_4_3_reg_312;
reg   [7:0] tmp_4_4_reg_317;
reg   [7:0] tmp_4_5_reg_322;
reg   [7:0] tmp_4_6_reg_327;
reg   [7:0] tmp_4_7_reg_332;
wire   [63:0] x_offset_cast1_fu_141_p1;
wire   [63:0] sum_1_cast_fu_172_p1;
wire   [63:0] sum_2_cast_fu_242_p1;
wire    ap_CS_fsm_state2;
wire   [63:0] sum_3_cast_fu_252_p1;
wire   [63:0] sum_4_cast_fu_262_p1;
wire    ap_CS_fsm_state3;
wire   [63:0] sum_5_cast_fu_272_p1;
wire   [63:0] sum_6_cast_fu_282_p1;
wire    ap_CS_fsm_state4;
wire   [63:0] sum_7_cast_fu_292_p1;
wire   [7:0] tmp_fu_146_p1;
wire   [7:0] sum_1_fu_166_p2;
wire   [7:0] sum_2_fu_237_p2;
wire   [7:0] sum_3_fu_247_p2;
wire   [7:0] sum_4_fu_257_p2;
wire   [7:0] sum_5_fu_267_p2;
wire   [7:0] sum_6_fu_277_p2;
wire   [7:0] sum_7_fu_287_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_1_reg_297 <= tmp_1_fu_162_p1;
        tmp_4_2_reg_307 <= {{u[23:16]}};
        tmp_4_3_reg_312 <= {{u[31:24]}};
        tmp_4_4_reg_317 <= {{u[39:32]}};
        tmp_4_5_reg_322 <= {{u[47:40]}};
        tmp_4_6_reg_327 <= {{u[55:48]}};
        tmp_4_7_reg_332 <= {{u[63:56]}};
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_address0 = sum_6_cast_fu_282_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_address0 = sum_4_cast_fu_262_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_address0 = sum_2_cast_fu_242_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        x_address0 = x_offset_cast1_fu_141_p1;
    end else begin
        x_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_address1 = sum_7_cast_fu_292_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_address1 = sum_5_cast_fu_272_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_address1 = sum_3_cast_fu_252_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        x_address1 = sum_1_cast_fu_172_p1;
    end else begin
        x_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        x_ce0 = 1'b1;
    end else begin
        x_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        x_ce1 = 1'b1;
    end else begin
        x_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_d0 = tmp_4_6_reg_327;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_d0 = tmp_4_4_reg_317;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_d0 = tmp_4_2_reg_307;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        x_d0 = tmp_fu_146_p1;
    end else begin
        x_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        x_d1 = tmp_4_7_reg_332;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        x_d1 = tmp_4_5_reg_322;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        x_d1 = tmp_4_3_reg_312;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        x_d1 = {{u[15:8]}};
    end else begin
        x_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        x_we0 = 1'b1;
    end else begin
        x_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3)) | ((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        x_we1 = 1'b1;
    end else begin
        x_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign sum_1_cast_fu_172_p1 = sum_1_fu_166_p2;

assign sum_1_fu_166_p2 = (8'd1 + tmp_1_fu_162_p1);

assign sum_2_cast_fu_242_p1 = sum_2_fu_237_p2;

assign sum_2_fu_237_p2 = (8'd2 + tmp_1_reg_297);

assign sum_3_cast_fu_252_p1 = sum_3_fu_247_p2;

assign sum_3_fu_247_p2 = (8'd3 + tmp_1_reg_297);

assign sum_4_cast_fu_262_p1 = sum_4_fu_257_p2;

assign sum_4_fu_257_p2 = (8'd4 + tmp_1_reg_297);

assign sum_5_cast_fu_272_p1 = sum_5_fu_267_p2;

assign sum_5_fu_267_p2 = (8'd5 + tmp_1_reg_297);

assign sum_6_cast_fu_282_p1 = sum_6_fu_277_p2;

assign sum_6_fu_277_p2 = (8'd6 + tmp_1_reg_297);

assign sum_7_cast_fu_292_p1 = sum_7_fu_287_p2;

assign sum_7_fu_287_p2 = (8'd7 + tmp_1_reg_297);

assign tmp_1_fu_162_p1 = x_offset[7:0];

assign tmp_fu_146_p1 = u[7:0];

assign x_offset_cast1_fu_141_p1 = x_offset;

endmodule //store64
